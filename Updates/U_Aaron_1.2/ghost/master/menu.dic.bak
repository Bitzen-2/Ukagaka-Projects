//---------------------------Menus--------------------------
//This .dic file is primarily concerned with the double-click menus for each of your ghosts. If you don't want to have menus for your characters, you'd just have to delete the OnMouseDoubleClick functions near the end of mouse.dic and then ignore this file, as none of it will be called I believe. Menus can be cool though, since you can put stuff in them and create new functions if you know what you're doing. For example, I've added a lot of games and interactions and little linked icons to my Hunter Smoker ghost to keep track of their feelings and such. Much of that is pretty complicated though (and kind of messy, cough), so I won't go into it here, but I covered some of the concepts in the coding page of the walkthrough, and enterprising ghost makers can study the menu.dic file I set up for Hunter/Smoker and see how I put it together.
//Anyway, menu.dic also contains the settings for a config menu that will let your user change their name or pronouns if they want, as well as the talk rate of the ghost, all of which are useful things for your ghost to do. So think hard about whether or not you want to skip this file or not.

//The complexity of this file depends on how customized you want your menus. If you just want to leave them as they are, then all you'll have to do is replace dialogue appropriately. You can always add stuff to their menus later if you get the urge. Otherwise, if you have plans in mind, you'll need to study what's going on in here carefully and pay attention to how things are set up! You can do a lot of unique stuff in this file if you're creative.

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!


//--OpenSakuraMenu
//This is a bit of intro dialogue before the main character opens their menu. You can see below that there are three pieces of separate dialogue listed before it goes to MenuRun. The character will randomly choose one of those pieces of dialogue before opening the rest of their menu. You can customize this with individual greetings for the character, such as "Yes, %(username)?" or "Need something, %(username)?" or things like that. Note that none of the lines end with \e!
//The \b2 tag tells the ghost to use their big balloon for this dialogue. If your menu has a lot of stuff, this'll probably look better than the small one.
//If you don't want multiple responses before opening the menu, you can delete the dialogue and just leave MenuRun.

OpenSakuraMenu
{
	if iGotMyMumsPermissionItsOkay >= 2 
		{
			"\0\s[9]\b2The fuck do you want??"
			"\0\s[30]\b2Fuck you!"
			"\0\s[5]\b2Wassup my bitch???"
			"\0\s[5]\b2Yo!\w2 What's up??"
			"\0\s[0]\b2How can I help you?"
			"\0\s[5]\b2Heyy, %(username)!\w3 How are you?"
			"\0\s[0]\b2Oh?\w2 Wanna do something?"
			"\0\s[22]\b2Something goin on?"
			"\0\s[30]\b2Hello!!"
			"\0\s[30]\b2Hi, %(username), how can I help you?"
		}
	else
		{
		"\0\s[5]\b2Yo!\w2 What's up??"
		"\0\s[0]\b2How can I help you?"
		"\0\s[5]\b2Heyy, %(username)!\w3 How are you?"
		"\0\s[0]\b2Oh?\w2 Wanna do something?"
		"\0\s[22]\b2Something goin on?"
		"\0\s[30]\b2Hello!!"
		"\0\s[30]\b2Hi, %(username), how can I help you?"
		}
		--
		MenuRun
}

Select.opensakuramenu //both this option and the selection below are just here so I can just link Aaron back to opening the menu again in any document if the user decides to do so
{
	OpenSakuraMenu
}

OnOpenMenu
{
	OpenSakuraMenu
}

//--MenuRun
//As you just saw above. This actually fills out the rest of the menu. If you're going to be adding or changing functions, this is where you'll be doing your edits.

MenuRun
 {	
 	wd = GetWeekDay
 	ap = GetAP
 	nowmin = Getnowmin
 	nowhour = Getnowhour
	//These four statements basically get the day of the week, whether it's AM or PM, the hour, and the time. It's putting together the information to display the time at the bottom of the balloon. Pay it no mind.
	--
	"\n\n\_q\b2" //The \n\n means two new lines as detailed in the walkthrough, and \_q means quick session, meaning all the text from this point on will display instantly instead of a few letters at a time like normal ghost dialogue.
	--
	if lastTalk != "" //What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty (!= means "does not equal").
	{
	  "\![*]\q[Repeat Previous Dialogue!,OnLastTalk]\n"
	  "\![*]\q[Repeat Last Dialogue!,OnLastTalk]\n"
	  //If the ghost has said something, it will then display this menu option. You can replace "Repeat Last Dialogue" with whatever caption you like, such as "What were you saying?" or "What did you say?" or "Could you repeat that?" or something like that.
	  
	  //*********************Advanced User Info*******************************
	  //These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.
	  
	  //I briefly touched in bootend.dic about \q, but I'll again cover it here. Pay very close attention to how this bit of dialogue is formatted. You'll see it goes \![*]\q[Displayed Name,linkedfunction]. Breaking it down, \![*] puts the balloon's option icon in front of the choice (usually a > or something), \q sets up the choice, Displayed Name which is the text that will display in the ghost's balloon, then linkedfunction, which is what the choice is linked to when the user clicks it. As you go through this file, look at how every menu option is set up, and you will see they all follow this format, give or take a \![*]. If you're going to be adding new options to menus or creating your own functions and such, make sure you follow this format and learn it well. Make sure to read the coding page of the walkthrough.
	  //***********************************************************************
	}
	--
 	"\![*]\q[Say something!,OnAiTalk]\n\n"
	"\![*]\q[Talk to me!,OnAiTalk]\n\n"
	
	//This option will force the ghost to say something from aitalk if the user clicks it. Just replace "Say something" and "Say something 2" with whatever captions you think would be appropriate for such an option. IF you don't want two options for captions, delete one of the lines.
	//Advanced users, you can add multiple captions for any option you add to a menu you make just like this, as long as you separate it from the other options into its own section with two dashes above and below.
	--
	"\![*]\q[Config Menu,configmenu]\n/
	\![*]\q[Functions,dosomething]\n/
	\![*]\q[My Statistics,OnCheckStatsPlease]\n\n/
	\![*]\q[Minigames!,playminigame]\n/
	\![*]\q[Tell Me A Fact!,facttime]\n/
	\![*]\q[Tell Me A Riddle!,riddletime]\n/
	//\![*]\q[Debate with me!,debatetime]\n/ //I don't think i'll ever get this done ;U;
	\![*]\q[Lets Talk Animals!,animaltalk]\n/
	\![*]\q[Give me A Song!,songrecommendations]\n\n[half]/
	\![*]\q[I've a Question for You,OnAskingaaron]\n/
	\![*]\q[Change colour for me!,changeshell]\n\n/
	//\![*]\q[Test Variable,TEEHEE]\n\n/ 
 	\![*]\q[Nevermind,CANCEL]\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
	
	//These three lead to the Config Menu, the Function menu, and Cancel. You can leave these alone if you like. All the envelopes at the end (see word.dic) basically display the year, month, day, weekday, and time.
}

Select.changeshell
{
	if RedShell == "Is"
	{
	"\0\s[30]Alright!\w4 Gimme a bit!\s[2]\w8\w8\w8"
	--
	"\s[30]\n\n3,\w2 2,\w2 1!\w3\![change,shell,Recoloured Palette]"
	--
	//"\0Done.\w5 \s[20]I feel weird now that I'm blue!" For some reason he won't say this dialogue 🤨🤨
	RedShell = "Isnt"
	BlueShell = "Is"
	HasChangedColour = "HAS" //lets aaron know the user has changed his colour at least once so he can comment on changing colours
	--
	"\e"
	}
	
	elseif BlueShell == "Is"
	{
		"\0\s[30]Alright!\w4 Gimme a bit!\s[2]\w8\w8\w8"
		--
		"\s[30]\n\n3,\w2 2,\w2 1!\w3\![change,shell,Normal Palette]" //\n\nDone.\w5 \s[30]I feel back to normal now that I'm red!"
		--
		RedShell = "Is"
		BlueShell = "Isnt"
		--
		"\e"
	}
	else
	{
		"\0\w2\s[20]I ran into an error!\w4\s[2] AH!!\e"
	} //If he can't change colour for some reason
}

Select.riddletime
{
	"\0\s[29]Sure!\w4\s[22] Just remember you only get one guess to guess what the riddle is so you better make it count!! \w4\s[28] Lemme see if I got one here for you!\n\n\w8\s[30]"
	--
	OnTellRiddle
}

Select.animaltalk
{
	"\0\s[28]Oh!\w3 Sure!!\w5\n\s[29]Do you have a favourite animal? \n\n\![*]\q[Yes,doeshavefavanimal]\n\![*]\q[No,doesnthavefavanimal]\e"
	"\0\s[5]Animals!\w3\s[6] They're so cool.\w2\s[28]\nDo you happen to have a fondness for a certain animal?\n\n\![*]\q[Yes,doeshavefavanimal]\n\![*]\q[No,doesnthavefavanimal]\e" 
	"\0\s[30]I'm an animal!!\w3\s[28] I think.\w8\w8\s[2]\w2\s[30] Anyway!\w3 \s[28]Do you favour a particular animal??\n\n\![*]\q[Yes,doeshavefavanimal]\n\![*]\q[No,doesnthavefavanimal]\e"
}

Select.doeshavefavanimal
{
	"\0\s[30]Really!?\w2\s[5] Sick!!\w3\s[29]\w5 What animal is that??\![open,inputbox,OnAnotherAnimalChoice]\e"
	"\0\s[30]Hell yeah!!\w3\s[5] What animal is your favourite?\![open,inputbox,OnAnotherAnimalChoice]\e"
}

Select.doesnthavefavanimal
{
	"\0That's...\w4\s[28] boring.\w8\w8\s[3] Why's that?\w8\n\n\s[8] Actually,\w2 nevermind.\w2\s[6] Let's do something else.\e"
	if iGotMyMumsPermissionItsOkay >= 2
	{
	"\0\s[8]You kidding me?? \w3Are you shitting my dick right now?\n\n\![*]\q[Im shitting your dick,doeshavefavanimal]\n\![*]\q[Not shitting your dick,damnbruhthatswack]\e"
	}
}

Select.damnbruhthatswack
{
	"\0\s[28]Huh.\w2\s[9] Weird.\e"
}

//Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}

//This is figuring out what day of the week it is. Leave it alone.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//This is finding out whether it's AM or PM. Leave it alone.
GetAP
{
 	if hour >= 0 && hour <= 11
 		{"AM"}
 	else
 		{"PM"}
}

//This is figuring out the minute. Leave it alone.
Getnowmin
{
	if minute >= 0 && minute <=9
		{"0%(minute)"}
	else
		{"%(minute)"}
}

//This is figuring out the hour. Leave it alone.
Getnowhour
{
	if hour12 >= 0 && hour12 <=9
		{"0%(hour12)"}
	else
		{"%(hour12)"}
}

//If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.
//Advanced users, note that this is formatted as Select.linkedfunction? Remember how it went \q[Displayed Name,linkedfunction] above? When a user clicks an option that doesn't begin with On, they'll be linked to Select.linkedfunction. Pay close attention as we go through and you'll see this in action.

Select.BACKTOMENU
	{
		MenuRun
	}

//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
	{
		TalkConfig
	}

//*********************Advanced User Info*******************************
//Some of you may be wondering why some of these Select.options lead to another function. Why not just put the config menu coding under Select.configmenu, instead of linking to TalkConfig?
//Basically any function that's preceded with Select. is limited in its complexity and can only be called within its own .dic file in my experience. Why should you care, you ask? Well, if you're going to link to this function any other way, such as linking it in other .dic files or as a page in a menu, it needs to be a stand-alone function so it can be properly called. I'm pretty sure.
//The basic jist is this; if you're going to reuse whatever it is the option leads to, you should make it its own function. Otherwise, you can leave it in Select.option. As a rule of thumb I'd probably put any complicated stuff in its own function, then use the Select.option to call the full function as you can see above. Simple dialogue responses to a choice can stay as a Select.option though (Like "Do you like going to raves and partying? Yes/No"). Study what stays as a Select.option and what links to another Function as we go through the file.
//***********************************************************************

//--TalkConfig
//This menu allows the user to change their name and other information, as well as put in their birthday and change how often the ghost speaks. You can restructure how this looks if you want, but it's perfectly functional as is. You can of course change the dialogue though if you like.

TalkConfig
{
	"\0\b[2]\_q\" 
	//This bit of dialogue sets up a large balloon and a quick session, like above, so all the text will appear immediately. The rest is formatted to display the information and options to change it. I wouldn't touch any of it if you don't know what you're doing.
	//I'll briefly explain the font tags I used here. \f[bold,1] turns bold on, \f[bold,0] turns it off, not unlike a <b> tag. \f[sup,1] turns superscript on (making it tiny and above the text) and \f[sup,0] turns it off. I touch on these tags in the walkthrough on SakuraScript.
	--
	"f[bold,1]Your Name:\f[bold,0] %(username) \f[sup,1]\n(\q[Change it?,TEACHNAME])\f[sup,0]\n[half]"
	--
	"\f[bold,1]Your Pronouns:\f[bold,0] %(heshe)/%(himher)/%(hisher) \f[sup,1]\n(\q[Change them?,TEACHPRONOUN])\f[sup,0]\n[half]"
	--
	"\f[bold,1]Your Birthday:\f[bold,0] %(birthdayprint) \f[sup,1]\n(\q[Change it?,TEACHBDAY])\f[sup,0]\n\n[half]"
	--
	"\f[bold,1]Toggle Inappropriate Language?\f[bold,0] \nRight now it's %(TheYouthOfTodayAreConfusing)\n\![*]\q[TURN ON,sexytalkon] \![*]\q[TURN OFF,sexytalkoff]" //I'd like to add an option where the user can decide if they want Aaron to make sex jokes and cuss around them, because I know not everyone find that type of humour funny. Hope it works haha
	"\f[bold,1]Toggle Ungentlemanly Language?\f[bold,0] \nRight now it's %(TheYouthOfTodayAreConfusing)\n\![*]\q[TURN ON,sexytalkon] \![*]\q[TURN OFF,sexytalkoff]"//Same as above but i replaced the word "inappropriate" with "ungentlemanly" so it'll change every now and then. teehee! they'll never notice. 
	"\f[bold,1]Toggle Youthful Exasperations?\f[bold,0] \nRight now it's %(TheYouthOfTodayAreConfusing)\n\![*]\q[TURN ON,sexytalkon] \![*]\q[TURN OFF,sexytalkoff]"//im a menace. fear me. coward before me. i have no mercy. i cannot be stopped.
	--
	"\f[sup,1]\n(Toggles cussing, sudden noises, sexual talk & out-of-character speech)\f[sup,0]\n\n[half]"
	--
	if aitalkinterval == 0
	{
		"\f[bold,1]Talk Rate:\f[bold,0] - Aaron doesn't talk \f[sup,1]\n(\q[Change it,talkinter])\f[sup,0]\n\n[half]"
	}
	else
	{
	"\f[bold,1]Talk Rate:\f[bold,0] - every %(talktime) \f[sup,1]\n(\q[Change it,talkinter])\f[sup,0]\n\n[half]"
	}
	--		
		{
		"\![*]Enable Uninstall? (NOW : %(deleteshitai))\n\q[ON,deleteon] \q[OFF,deleteoff]\n\n[half]" // :'(
		}
	--
	"\![*]\q[Back to the menu,OnOpenMenu]\e"
}


Select.sexytalkon //hahhahahhahahhahha s e x y 
{
	if iGotMyMumsPermissionItsOkay >= 2 //if the user asks yet again
	{
	"\0\s[28]It was on before?\w4\s[6] But thanks for giving even more permission to cuss my fucking head off.\e"
	}
	elseif iGotMyMumsPermissionItsOkay = 2 // the first time user asks for aaron to cuss 
	{
	"\0\s[30]Yay!!\w3\s[5] I can say fuck and sex without being scolded for once!!\e"
	"\0\s[30]Fuck yeah,\w2 %(username)!!\w5 \s[6]You the best.\e"
	"\0\s[5]Let's fuckin' go!!\w5\s[30] Thank you!\e"
	}
}
//there was a chance and I took it. dont blame me. its a hard living

Select.sexytalkoff
{
	if iGotMyMumsPermissionItsOkay <= 1 //if the user asks aaron to shut the fuck up again and read the bible
	{
	"\0\s[28]You asked me not to use bad language around you before,\w3 %(username).\w5\s[6] Never fear!\w3 I'll continue to respect your wishes and keep my mouth clean.\e"
	}
	
	elseif iGotMyMumsPermissionItsOkay = 1 //when the user asks aaron to behave in a holy manner and shut the fuck up
	{
	"\0\s[6]Fair enough.\w3\s[29] I'll mind my language around you, %(username)!\e"
	}
}


//This and the next few set up the pronouns, as you can see by the linkedfunction names. You can replace "\0\s[0]What pronouns do you want?" with your own dialogue if you prefer, but leave the rest of it alone.

Select.TEACHPRONOUN
{
	"\0\s[6]What pronouns do you use?\w5\n\n[half]\_q/
		\![*]\q[He-His-Him,choicemasc]\n/
		\![*]\q[She-Her-Her,choicefem]\n/	
		\![*]\q[They-Their-Them,choiceneither]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	"\0\s[5]I'll refer to you with He/Him pronouns from now on.\e"
	//Leave the part above the double dashes alone. You can replace the snip of dialogue however with whatever you like.
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	"\0\s[5]I'll refer to you with She/Her pronouns from now on.\e"
	//as above, you can also replace this dialogue.
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	hesshes = "they're"
	--
	"\0\s[5]I'll refer to you with They/Them pronouns from now forth.\e"
	//and this one.
}

//Here are some examples of these envelopes in use.
//"%(heshe) left that there."
//"%(hisher) work is really cool."
//"I'll ask %(himher) later."
//"%(hesshes) really good at it."


//These two options toggle whether or not you can delete your ghost. Leave them alone.

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}


//This next set of functions handles inputting the user's birthday.

Select.TEACHBDAY
	{	
		"\0\s[8]What month were you born? \w8 \s[6]A Name or number both work.\![open,inputbox,OnUserBornMonth,-1]\e"
		
		//You can replace the dialogue up to the \![open,inputbox,OnUserBornMonth,-1] tag, leave that alone. You'll need the input box to get the information.
		
		//*********************Advanced User Info*******************************
		//I also touched on this in bootend.dic and explained it in the walkthrough page on coding, but I'll also go into it here. I'm going to break down the tag there at the end of the sentence so you know what it's doing. Basically, \! means a function is going to happen, open tells it to open something, inputbox tells it to open an input box, and OnUserBornMonth is the function the input box will be linked to, which is just below here. -1 means the input box should not time out. If you want to add input boxes to some new function for whatever reason, you should follow this basic format.
		//On a related note, you can raise any function at the end of any piece of dialogue by using this format - \![raise,InsertFunctionName]. This can be handy for testing things if the function is hard to get to run otherwise.
		//***********************************************************************
	}

//--OnUserBornMonth
//This takes the value that the user put into the input box above and evaluates it. Most of this you won't have to touch, but I'll explain what it's doing anyway. I'll point out where you can change the dialogue.

OnUserBornMonth
{
	_tempmonth = TOSTR(reference0) //this stores what the user put in as a variable called _tempmonth
	_tempmonth = TOLOWER(_tempmonth) //changes it to lowercase
	
	//this is attaching the right value to the input from the user
	if _tempmonth == "january" || _tempmonth == "1" {bornmonth = 1; bornmonthprint = "January"}
	elseif _tempmonth == "february" || _tempmonth == "2" {bornmonth = 2; bornmonthprint = "February"}
	elseif _tempmonth == "march" || _tempmonth == "3" {bornmonth = 3; bornmonthprint = "March"}
	elseif _tempmonth == "april" || _tempmonth == "4" {bornmonth = 4; bornmonthprint = "April"}
	elseif _tempmonth == "may" || _tempmonth == "5" {bornmonth = 5; bornmonthprint = "May"}
	elseif _tempmonth == "june" || _tempmonth == "6" {bornmonth = 6; bornmonthprint = "June"}
	elseif _tempmonth == "july" || _tempmonth == "7" {bornmonth = 7; bornmonthprint = "July"}
	elseif _tempmonth == "august" || _tempmonth == "8" {bornmonth = 8; bornmonthprint = "August"}
	elseif _tempmonth == "september" || _tempmonth == "9" {bornmonth = 9; bornmonthprint = "September"}
	elseif _tempmonth == "october" || _tempmonth == "10" {bornmonth = 10; bornmonthprint = "October"}
	elseif _tempmonth == "november" || _tempmonth == "11" {bornmonth = 11; bornmonthprint = "November"}
	elseif _tempmonth == "december" || _tempmonth == "12" {bornmonth = 12; bornmonthprint = "December"}
	
	else //if the month isn't a valid month, like 32 or something.
	{
			"\0\s[8]That's..\w8\w8\s[9] not a month,\w4 ]s[8]I believe."
			"\0\s[8]Huh??\w8 Try an actual month."
			--
			"\![open,inputbox,OnUserBornMonth,-1]\![set,balloontimeout,-1]\e"
			
			//You can replace this dialogue in the first line. You need to leave the tag for the input box so they can put in a correct month. That last tag there for ![set,balloontimeout,-1] makes it so the input box won't time out if the user takes too long.
	}
	--
	//If it's a valid month
	
	"\0\s[8]So you were born in %(bornmonthprint)?\w5\s[0] Sick!\n\w8\s[8]What day was it, again?"
	--
	"\![open,inputbox,OnUserBornDay,-1]\![set,balloontimeout,-1]\e"
	
	//Here you can see the use of a bornmonthprint envelope to show the user what month they put in. Notice that it opens an inputbox at the end the same way the one above did. You can replace the dialogue in the first line just as with above.
}

Select.playminigame
{
	"\0\s[0]Oh?\w2 \s[5]What'd you wanna play??\n\n"
	"\0\s[5]Oh hell yeah!\w4\s[0] What game were you thinking of?\n\n"
	--
	"\![*]\q[Rock; Paper; Scissors!,playRPS]\n/
	\![*]\q[Higher or Lower?,OnStartholgame]\n/
	\![*]\q[Scramble!,OnJuniorJumble]\n\n/
	//\![*]\q[Guess the Drawing!,OnGuessTheDrawing]\n\n/
	\![*]\q[Go Back,opensakuramenu]\e"
}

Select.playRPS
{
	"\0\s[5]Good choice!\w4 Now,\w2 \s[22]are you ready to get your ass whooped??\w6 \n\nRock,\w2 Paper,\w2 Scissors!\w2\n\n"
	"\0\s[22]Hah!\w4 You're going down,\w6 %(username)!\w8\n\nRock,\w2 Paper,\w2 Scissors!\w2\n\n"
	"\0\s[22]Oh??\w5 You dare challenge me??\w5\w5\s[22] I am rather dashing,\w4 I know,\w4\s[6] but there's no need to participate in a losing fight, %(username)!\w8\n\nAnyway!\w8 \w4Rock,\w2 Paper,\w2 Scissors!\n\n"
	"\0\s[0]Oh,\w2 \s[22]really?\w6 I was Scissors,\w2 Paper,\w2 Rock champion back in my day!\w4 You don't know what you're up against!\w4\n\nRock,\w2 Paper,\w2 Scissors!\w3\n\n"
	--
	"\![*]\q[Rock!,choserock]\n/
	\![*]\q[Paper!,chosepaper]\n/
	\![*]\q[Scissors!,chosescissors]\n\n/
	\![*]\q[Leave Game,leftgame]\e"
}

//not too big of a coder so best I can do is divide the code up into 4 winning dialogues, 4 losing dialogues and 1 draw dialogue. Should work eitherway
//dont mind that comment above. this got more complicated then i wouldve liked it to.

Select.choserock
{
_rockthrow = RAND(2)
	case _rockthrow
	{
when 0
{
	"\f[bold,true]\s[25]\_qAaron chose paper.\n%(username) chose rock.\f[bold,false]\n\n\_q\w8"
	--
	"\0\s[25]HAHA!!\w3 PAPER ENCAPSULATES ROCK!\w3 YOU LOSE!!-\w4\n\s[4]\w5-\w5\w5\w5\w5\w5 I mean,\s[0]\w7\w7 good game!"
	"\0\s[25]YOO!\w6 I WON!\w7 \s[5]LET'S GO!\w4\w4\w4\w4\n\s[9]Oh,\w2 and,\w2 \s[0]good game, %(username).\w5\s[22] I totally beat your ass."
	"\0\s[25]Hey!!\w6\w6 \s[5]Look who's talking now, hey??\w4\w4 I win!\w4\w4\w4\s[0] Good game!"
	"\0\s[25]HA!\w6 TEACHES YOU FOR UNDERESTIMATING ME!!\w6\w6.\w6\w6.\w6\w6.\w6\w6\w6\s[9]\nNow I feel bad for rubbing my victory in your face,\w3\s[3] you did well.\w5 Sorry."
	--
	SPRlose++
	--
	OnEndSPR
}
when 1
{
	"\f[bold,true]\s[27]\_qAaron chose scissors.\n%(username) chose rock.\f[bold,false]\n\n\_q\w8"
	--
	"\0\s[27]ANNNNND--\w3 .\w3.\w3.\w6\n\s[4]Huh.\w3 It seems you've won.\w3\s[0] Eh,\w2 fair enough.\w4 Congrats, %(username)!"
	"\0\s[27]Ah--\w8\w8\n\s[4]Seems you've won, %(username).\w6\s[5] Not to fret!\w4 I take both victories and failures in stride!"
	"\0\s[27]Ha!\w3 ha?\w3 ha\w3.\w3.\w3.\w5 \n\s[9]Suppose I underestimated you.\w4\s[22] No matter.\w4 This was only one game!\w5 We can play another!"
	"\0\s[27]...\w5 You know,\w3 I was betting on you choosing paper.\w5 \s[9]What a bummer."
	--
	SPRwins++
	--
	OnEndSPR
}

else
{
	"\f[bold,true]\s[26]\_qAaron chose rock.\n%(username) chose rock.\f[bold,false]\n\n\_q\w8"
	--
	"\0\s[26]Draw!\w3\s[9] .\w2.\w2.\w8\w5How anti-climatic."
	"\0\s[26]Draw!\w3\s[9] .\w2.\w2.\w8\w5How anti-climatic."
	--
	SPRdraws++
	--
	OnEndSPR
}
}
}

Select.chosepaper
{
	_paperthrow = RAND(2)
	case _paperthrow
	{

when 0
{
	"\f[bold,true]\s[27]\_qAaron chose scissors.\n%(username) chose paper.\f[bold,false]\n\n\_q\w8"
	--
	"\0\s[27]HAHA!!\w3 SCISSORS SLASH PAPER!\w3 YOU LOSE!!-\w4\w8\w8\w8\n\s[4]\w5-\w5\w5\w5\w5\w5 I mean,\s[0]\w7\w7 good game!"
	"\0\s[27]Hey,\w5 hey,\w5 hey!!\w7 \s[22]The champion gets to keep his crown,\w3 it seems.\w7 \s[6]As it should be."
	"\0\s[27]HUZZAH!\w6 SCISSORS COME OUT VICTORIOUS!\w6\s[6] I can always bet on scissors.\w6\s[30] They got my back."
	"\0\s[27]YOOO!!\w6 IMAGINE CHOOSING ROCK,\w3 \s[29]HAHA!!\w6 I WIN!!\w4\s[22] Let's play again!"
	--
	SPRlose++
	--
	OnEndSPR
}
	
when 1
{
	"\f[bold,true]\s[26]\_qAaron chose rock.\n%(username) chose paper.\f[bold,false]\n\n\_q\w8"
	--
	"\0\s[26]Huh?\w4\w8\w8\s[7] I swear I was going to win that one.\w6 Ugh.\w8"
	"\0\s[26]HAH..\w8\w8 a\w3h\w8\w8 h\w2a\w2h\w2a\w2.\w2.\w2.\w5\w5\w5\w5\w5\w5\n\n\s[20]I really thought I was gonna win that one.\w5\s[0] Fair game,\w2 %(username)!"
	"\0\s[26]ANNNNND--\w3 .\w3.\w3.\w6\n\s[4]Huh.\w3 It seems you've won.\w3\s[0] Eh,\w2 fair enough.\w4 Congrats, %(username)!"
	"\0\s[26]\w8\w8.\w8\w8.\w8\w8.\w8\w8\w8\s[7]You were supposed to let me win.\w5\n\s[5]Haha!\w5 I'm just kidding.\w7\s[8]Maybe.\w8\s[30] Howza bouts we play again??"
	--
	SPRwins++
	--
	OnEndSPR
}

		else
		{	
		"\f[bold,true]\s[25]\_qAaron chose paper.\n%(username) chose scissors.\f[bold,false]\n\n\_q\w8"
		--
			"\0\s[25]Oh, it's a draw--\w4\w4\s[9]I mean,\w6\s[0] we can both agree I'm better at Rock; Paper; Scissors, right?\w8\w8\n.\w8\w8.\w8\w8.\w8\w8\w8\s[3]\nPlease?"
			"\0\s[25]Oh, it's a draw--\w4\w4\s[9]I mean,\w6\s[0] we can both agree I'm better at Rock; Paper; Scissors, right?\w8\w8\n.\w8\w8.\w8\w8.\w8\w8\w8\s[3]\nPlease?"
		--
		SPRdraws++
		--
		OnEndSPR
		}
	}
}


Select.chosescissors
{
	_scissorthrow = RAND(2)
	case _scissorthrow
	{
	when 0
{
	"\f[bold,true]\s[25]\_qAaron chose paper.\n%(username) chose scissors.\f[bold,false]\n\n\_q\w8"
	--
	"\0\s[25]You\w2-\w8\w8.\w8.\w8\w8 were supposed to choose rock.\w6\s[8] Didn't you get the memo, %(username)?"
	"\0\s[25]BRAVO ME!!-\n\n\w8\s[7]\w8\w8Nevermind. \w5I lost.\w5\s[6]It's no matter,\w2 though.\w5 \s[22]We can play again!"
	"\0\s[25]Uh...\w8\w7 \s[3]how about my paper be made of stone??\w6\s[29] Or even wood?\w7\w7\s[30] Anything that scissors can't cut!\w8\w8\w8\n\nSo that's a no?\w8\w8\nFair enough."
	"\0\s[25]ANNNNND--\w3 .\w3.\w3.\w6\n\s[4]Huh.\w3 It seems you've won.\w3\s[0] Eh,\w2 fair enough.\w4 Congrats, %(username)!"
	--
	SPRwins++ //Now, i've tried to add in a feature where Aaron counts how many times you've lost, won and drawn. though, for some reason it doesnt count properly? It somtimes counts your loss/win/draw, but most of the time it just counts random things, idfk why. It won't do any damage to keep here as i've commented the dialogue where he'd mention your stats, but it's kinda annoying, haha.
	--
	OnEndSPR 
}
when 1
{
		"\f[bold,true]\s[26]\_qAaron chose rock.\n%(username) chose scissors.\f[bold,false]\n\n\_q\w8"
		--
	"\0\s[26]HAHA!!\w3 ROCK SMASHES SCISSORS!\w3 YOU LOSE!!-\w4\w8\w8\w8\n\s[4]Well, now I feel bad for rubbing it in.\w5\w5\w5\w5\w5\w5 I mean,\s[0]\w7\w7 good game!"
	"\0\s[26]HEYHEYHEY!!\w6 \s[22]WHERE'S MY SCISSORS,\w3 PAPER,\w3 ROCK\w3 CROWN??\w7\s[30] I'M SO GOOD AT THIS GAME!"
	"\0\s[26]Heyoo!\w8\w8\s[22]	\nFoiled again by yours truly!\w6 \s[30]Let's play again!"
	"\0\s[26]HEHEH!\w7\s[22] THAT'S WHAT YOU GET FOR CHALLENGING THE \s[30]\f[bold,true]K\w2I\w2N\w2G\w2\f[bold,false]\s[22] \w3OF SCISSORS,\w3 PAPER,\w3 ROCK!"
	--
	SPRlose++
	--
	OnEndSPR 
}
else
{
	"\f[bold,true]\_q\s[27]Aaron chose scissors.\n%(username) chose scissors.\f[bold,false]\n\n\w8\_q\s[27]Ah-\w5\w8\w8\s[6]I mean,\w4 if my scissors were made out of diamond and yours were made out of paper,\w3 I'd reign victorious.\w6\s[30] Can we go with that?\w8\w8\n\n.\w8\w8.\w8\w8.\w8\w8\w8\s[8]So that's a no?\w8\w8\s[3] alright."
	--
	SPRdraws++
	--
	OnEndSPR 
}
}
}


Select.replayRPS
{
	"\0\s[22]Sick!\w5 You ready to play again,\w5 %(username)?\w7\s[29]\nRock,\w2 Paper,\w2 Scissors!"
	"\0\s[22]If you say so!\n\w8Rock,\w2 Paper,\w2 Scissors!"
	"\0\s[30]Hell yeah!\w4 I love playing with you!\w5\nRock,\w2 Paper,\w2 Scissors!"
	--
	"\n\n\![*]\q[Rock!,choserock]\n/
	\![*]\q[Paper!,chosepaper]\n/
	\![*]\q[Scissors!,chosescissors]\n\n/
	\![*]\q[Leave Game,leftgame]\e"
}

//This adds an appropriate suffix to the number for the day. No need to mess with this.

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{	"%(bornday)st"	}
	elseif bornday == 2 || bornday == 22
	{	"%(bornday)nd"	}
	elseif bornday == 3 || bornday == 23
	{	"%(bornday)rd"	}
	else
	{	"%(bornday)th"	}
}	

//--OnUserBornDay
//This is much like the above function OnUserBornMonth. It'll take the value the user put in for the day and analyze it. Again, there'll be comments explaining how it works, but all you really need to do is change the dialogue appropriately. I'll point out where you can add new dates to check for.

OnUserBornDay
{
	_tempday = reference0 //storing the input in _tempday
	_tempday = TOLOWER(_tempday) //changes it to lowercase
	_tempday = REPLACE(_tempday,"st","") //if the user types something like 2nd, 3rd, etc, this will make it just the number. It'll just add the suffix back later on the one that actually shows.
	_tempday = REPLACE(_tempday,"nd","")
	_tempday = REPLACE(_tempday,"rd","")
	_tempday = REPLACE(_tempday,"th","")
	_tempday = TOINT(_tempday) //Converts it to an integer
	
	if ((bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12) && _tempday >= 1 && _tempday <= 31) || (bornmonth == 2 && _tempday >= 1 && _tempday <= 29) || ((bornmonth == 4 || bornmonth == 6 || bornmonth == 9 || bornmonth == 11) && _tempday >= 1 && _tempday <= 30) //This ugly function checks if the day falls into a valid range. If it does, we set some variables and continue down.
	{
		bornday = _tempday
		borndayprint = Printday
		userbirthday = "%(bornmonth)month %(bornday)day"
		birthdayprint = "%(bornmonthprint) %(borndayprint)"
		
		"%(birthchecked)"
		//Mostly defining envelopes and values in here. No need to touch any of this! Eagle-eyed readers will notice the new envelope birthchecked on its own line like a tiny king. We'll get to that momentarily, but pay it no mind for now.
	}
	else //If the day isn't valid, like the 10046th or something, this will open the input box again and have a \e so the dialogue below doesn't play. You can replace the dialogue in the first line here.
	{
		"\0\s[8]That's not a real date??\s[7] Have you ever seen a caldendar in your life?"
		"\0\s[8]That isn't how dates work,\w4\s[0] haha."
		--
		"\![open,inputbox,OnUserBornDay,-1]\e"
	}	
}

//--birthchecked
//This is the new envelope you saw me point out above. As you can see here, you can actually call dialogue in a function with an envelope, even when it has if and else statements like here! Which can be pretty handy. Again, more on envelopes in word.dic. Creative ghostmakers can find handy ways to exploit this, I'm sure.

birthchecked
{
	if userbirthday == dayslot //if today is the user's birthday
		{
			"\0\s[22]Guess what day it is today!!\w4 It's %(bornmonthprint) the %(borndayprint)!!\w4 \s[5]YOUR BIRTHDAY!\w4\s[6] Happy Birthday!!\e"
			"\0\s[5]Happy Birthday to you!~\w8\nHappy Birthday to you!~\w8\nHappy Birthday to %(username);~\w7\nHAPPY BIRTHDAY TO YOU!!~\e"
			//replace this dialogue with whatever you like
		}
	elseif userbirthday == "12month 25day"
		{
			"\0\s[20]YOU WERE BORN ON CHRISTMAS??\w5 ARE YOU AND JESUS TWINNING???\w5 HOW MANY PRESENTS DO YOU GET EVERY YEAR??\w5\s[8] Gosh,\w4 so many questions.\w7\s[5] Happy Birthday,\w4 also!!\w7 I won't forget!\e"
			//As you can see, you can set up an elseif statement to check if the user's birthday is any day you want! More on elseif statements in bootend.dic. In this case, there's specialized dialogue if the user was born on Christmas. You can replace this with whatever you like, or change the date you're checking as well, like to one of your character's birthdays if you want. You can also delete this elseif if you don't care.
		}
	else //if the birthday is not listed above.
		{
			"\0\s[8]Your birthday is %(bornmonthprint) %(borndayprint)?\w6\s[0] Wow!\w6 I don't think I've met many people who are born on the %(borndayprint) of %(bornmonthprint)!\w7 \s[5]Thanks for telling me!\w4 I will remember!!\e"
			//note the use of envelopes to display the newly set birthday properly. You can replace this dialogue as well, and you can use %(bornmonthprint) and %(borndayprint) to display the month and day in the new dialogue, if you want.
		}
}

//--Talk Rate
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter
 	{
 		"\0\s[8]\b2How often should I speak?\w8 Currently,\w4 I speak around every %(talktime) or so./
		//note the new envelope here for %(talktime). You'll see it again in a second. You can replace the dialogue above with whatever you like, just make sure it ends with ./ and not \e.
 		\0\n\n[half]/
 		\![*]\q[Every 30 seconds,TALKMAX]\n/
		\![*]\q[Every minute,TALKHIGH]\n/
 		\![*]\q[Every 3 minutes,TALKNORMAL]\n/
		\![*]\q[Every 5 minutes,TALKPOOR]\n/
 		\![*]\q[Don't speak,TALKNONE]\n\n[half]/
		\![*]\q[Don't change,TalksTill]\e"
	}

//If the user doesn't want to change the rate. You can change all of the dialogue in any of these options if you want to reflect the choice the user made. You TECHNICALLY could also change the value in talktime to reflect some other way of measuring time but I wouldn't recommend it, it'd just be confusing I'm sure.
Select.TalksTill
	{
		"\0\s[8]Oh,\w4\s[22] changed your mind so quickly?\e"
	}

//If the user chooses every 30 seconds.
Select.TALKMAX
	{
 		talktime = "30 seconds" //this sets up the envelope properly
		aitalkinterval = 30 //this changes the actual rate
		
 		"\0\s[6]I'll tell you something every thirty seconds.\w6 \s[5]Good thing too,\w4 because I've a lot to talk about.\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talktime = "minute"
		aitalkinterval = 60
		
 		"\0\s[6]I'll speak to you every minute.\w5\s[3] I think I'm gonna need a watch to time the minutes,\w4 though.\e"
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talktime = "3 minutes"
		aitalkinterval = 180
		
 		"\0\s[6]I'll speak every three minutes.\w4\s[8] Even if it is oddly specific.\e"
	}

//If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
	{
 		talktime = "5 minutes"
		aitalkinterval = 300
		
 		"\0\s[6]I'll tell you something every five minutes,\w3 then.\w6\s[8] It's probably best for both of us this way,\w6\s[29] haha.\e"
	}

//If the user chooses to not have them speak. This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
	{
 		talktime = "No Talking"
		aitalkinterval = 0
		
		"\0\s[9]I will not speak\w4.\w4.\w4.\w8\w8 \s[7]As boring as it may be.\e"
	}

	
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
	{
		OnTeachName	
	}

	
//If the user selects cancel in a menu. Replace as you like, or just leave them blank.
Select.CANCEL
	{
		if iGotMyMumsPermissionItsOkay >= 2
		{
			"\0\s[9]Fuck you too,\w2 then.\e"
			"\0\s[7]Asshole.\e"
			"\0\s[6]Aight my g\e"
			"\0\s[6]You cool my man\e"
			"\0\s[6]Ah, alright.\e"
			"\0\s[8]Hm.\e"
			"\0\s[6]If you say so.\e"
			"\0\s[5]Alright, alright.\e"
		}
		else
		{
		"\0\s[6]Ah, alright.\e"
		"\0\s[8]Hm.\e"
		"\0\s[6]If you say so.\e"
		"\0\s[5]Alright, alright.\e"
		}
 	}

	
//Going back to the MenuRun function we finished above, this is if someone selects the Functions option, linked to dosomething. As you can see, it ends up as Select.dosomething.


Select.dosomething
{
 		"\0\s[8]\b2Oh? How can I help you?\n\n"
 		"\0\s[29]\b2What'd you want me to do?\n\n"
		"\0\s[29]\b2I'd love to run an errand for you!\n\n"
		
		//I mentioned this above in MenuRun, but you can have a set of multiple different responses that may randomly appear when the menu is opened if you offset them from the rest with the -- dashes below this note. Try opening this menu yourself with the template to see how it works. The character will randomly choose one line as the intro. 
		//If you don't want to deal with this, just delete the extra lines and leave one. Otherwise, replace the dialogue above as you like, but note that they don't end with \e here. You can leave the rest of this below alone.
		--
 		"\_qCan you...\n/
		\![*]\q[Open My Calendar,CALENDAR]\n/
		\![*]\q[Check My Email,MailCheck]\n/
		\![*]\q[Open The SSP Preferences,sspconfig]\n/
		\![*]\q[Empty My Recycle Bin,ChoiceGarbagecan]\n/
		\![*]\q[Change My Background,backgroundchange]\n/
		\![*]\q[Fix My Clock,clockcheck]\n/
		\![*]\q[Show System Information,ChoiceSystemInformation]\n\n/
		\![*]\q[What were the Hotkeys?,manyouforgotthehotkeysagainsmhmyhead]\n/
		\![*]\q[I Found A Bug!,bugreport]\n\n/
 		\![*]\q[Back to main menu,BACKTOMENU]\_q\e"
}

//When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0\s[6]I'll open the calendar for you.\w8\![open,calendar]\n\n\w6\w8\w8\w8\s[28]I forgot today was the %(day) of the %(month)!\w5\e"
	
	//You can replace the dialogue here up to the \!.
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}

//backgroudn timems
Select.backgroundchange
{
	"\0\s[5]Oh!\w3 Easy-peezy!\w6\s[29] I'm gonna need you to drag the file you want your background to be onto me,\w3 though.\w6\s[3] I can't choose your background for you, \s[20]I'm indecisive.\e"
}

//When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0\s[6]I'll open the SSP Config Menu for you.\w8\![open,configurationdialog]\e"
	
	//Again, you can replace up to the \! tag.
}


//If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	//Don't touch this line. for those curious, it's referencing a SAORI, which are optional user-made plug-in dlls you can download to enable different functions on your ghost. gomi.dll is one included with this template. All SAORI are in Japanese (maybe Korean or Chinese as well idk) and many have disappeared by now, so don't concern yourself very much with SAORI. They're for skilled developers, mostly.
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[8]Ah,\w3 \s[29]lemme go check it real quick.\s[6] Be right back,\w4 %(username).\s[-1]\w8\w8\w8\s[28]\n\nIt was empty.\w7\s[0] A real shame.\e"
		
		//This isn't the usual flat template dialogue, mostly because I wanted to show that this is a good place to use s[-1], which I covered in the walkthrough file. You can have your ghost disappear momentarily like they're going to check your recycle bin, then come back. \c clears the ghost's balloon of text. Replace dialogue as you desire.
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[8]Empty the recycle bin?\w8\s[6]I'll go empty it for you,\w4 then.\s[29]\w8Gimme a bit.\w8\s[-1]\w8\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\x\s[6]Done.\e"
		
		"\0\s[8]Release the garbage?\w5\s[6] I sure will.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\x\s[6]Done.\e"
		
		//Somewhat similar to the above, but notice the \![raise],OnGarbagecanEmpty] tag in there. That's what actually empties the recycle bin, so make sure you don't delete that tag. Otherwise, replace the dialogue as you want.
		//As you can see, you can have multiple pieces of dialogue in here, just like you can for many other functions scattered through the .dic files. If you only want the one, just delete the others, or if you want to add more, just copy and paste and write new dialogue as it comes to you. This applies to when the recycle bin is empty as well.
	}
}


//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. Don't touch any of this either. For those curious though, note that this is done using another SAORI, this time saori_cpuid.dll.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
//This is when the user chooses to check their email. The rest of this function plays out in etc.dic. You can leave this alone.
Select.MailCheck
	{
		"\![biff]\e"
	}


	
//---- OnChoiceTimeout ---------------------------------------------------------
//If the user is given a menu with choices, but doesn't pick one of the choices, it will eventually time out. At that point, they will say this dialogue. Replace with whatever you like, or leave it blank.

OnChoiceTimeout
 {
	"\0\s[7]If you didn't wanna talk, why'd you bother me?\e"
 }
 
//---- Secondary Character Menu ---------------------------------------------------------
//This section has to do with the menu for the second character. If you don't want your second character to have a menu, you can just delete this whole chunk.

OpenKeroMenu //lmfao imagine having a kero in your ghost what a pleb
 {
	"\1\s[10]\b[2]"
	"\1\s[15]\b[2]"
	"\1\s[16]\b[2]"
	
	//You've seen so far that you can set up multiple options for menu introductions. You can also set up multiple poses to match up to multiple dialogue. So for example, when you open Triangle's menu, he may randomly do any of these three poses, and randomly choose from any of the four dialogue options below, before continuing with his menu. Make a close note of the -- dashes breaking these up.
 	--
	"This is a menu introduction dialogue."
 	"This is another menu introduction dialogue."
 	"This is the third menu introduction dialogue."
 	"This is the fourth menu introduction dialogue."
 	--
	"\n\n[half]/
	\![*]\q[Update,keroupdatecheck]\n/
	\![*]\q[Test variable,testvariable]\n\n/
	//When you are done with the test variable, aka your ghost is finished or you just don't want it showing up when you publish your ghost beta or whatevs, simply add two // slashes in front of \![*] to comment the line out. In Notepad++, it will turn green. When you want to use it again, erase the two slashes to turn it back to normal.
	\![*]\q[Nothing,keroCANCEL]\e"
}

//There are no real set things for the second character to do, really. You can mostly add whatever functions you want to them, their menu is totally free reign. In mine for example, Hunter has some games, a pseudo-FAQ for users, a bug report, an update option, and most importantly, a test variable. A lot of that is fairly complicated though, so I won't get into it here. Advanced Users can pick up Hunter and Smoker and study their menu.dic to see how I did it though, and those who read the coding page of the walkthrough and want to make their own functions can feel free to add them here. 
//For the purposes of this simple template, I'll include two options that may come in handy - an update option and a bug report option, as well as the test variable.

//If you click cancel. Replace dialogue as you want.
Select.keroCANCEL
{
	"\1\s[10]This is menu cancel dialogue.\e"
}


//This is when they select bug report. This is mostly meant to briefly give the user information about you, the creator, and how to report a problem to you. This can be handy if the person forgot where they got their ghost or how to contact you. Add whatever info you like here.
Select.bugreport
{
"\0\s[8]Did you find something wrong? \w5\s[28]You can contact my developer at this\_a[https://www.instagram.com/ryder_but_cool/] Instagram account! \_a\n\n\w5\s[5]Shoot Bitzen a DM and Bitzen will gladly help you with your problem!"
}

//When clicked, this will automatically tell the ghost to check for updates. More detail on updates in etc.dic. You can leave this alone.
Select.keroupdatecheck
{
	"\1\s[10]\![updatebymyself]\e"
}

//--Test Variable --------------------------------------------------------
//I briefly mentioned the test variable in bootend.dic and possibly in etc.dic as well, I'm not sure. What exactly is the test variable? Basically, it's a place you can plug in anything you want to test out. While you can use Script Input to test most of your ghost's dialogue, there are some lines it just can't do, and it can't help you test choices. But the test variable can!
//You can also use this to test functions as I mentioned above by adding \![raise,function] at the end of it, although you can do this with Script Input as well. Advanced Users, the test variable is also great for testing out any new stuff you may add to your ghost, like mode settings, item values, functions, raising or lowering numbers, what have you, particularly if you have a bunch you want to change all at once.

//It is ALWAYS A GOOD IDEA to test your dialogue! If you won't check it with the test variable, at least test it with Script Input! It'll save you so much trouble!

Select.testvariable
{
	"\1\s[10]Testing!\e"
}



OnAskingaaron
{
	"\0\s[8]Oh?\w4 \s[28]Do you have a question for me?\n\n\w5"
	--
	"\_qAsk Him About...\n\n/
		\![*]\q[What Are You?,whatishe]\n/
		\![*]\q[How Are You?,howishe]\n/
		\![*]\q[About You,whoishe]\n/
		\![*]\q[Your Past Job,nonono]\n\n/
	\![*]\q[Go Back,opensakuramenu]\_q\e"
} 
//Just so I don't forget, i'll put what i plan each thing to do here. I doubt i'll get it done all in one go. 
//"what are you" talks about protogens and what they are
//"how are you" idk small talk 
//"tell me a fact" fun facts for all ages!
//"tell me a riddle" riddles galore
//"tell him something" opens the input box and the user gets to talk to him outside of what i've added to him. i plan to add a lot of key terms to it.
//"song reccomendations" idk songs
//"debate with me" just silly debate topics. eg. Aaron asks if you like pineapple on pizza, you say yes, then he (jokingly) disapproves of your taste. Just good fun
//"go back" pretty self-explanatorysdfsfkbsfdlsiug

Select.whatishe
{
	"\0\s[30]I am a Protogen!!\n\n\w3\s[28] Or,\w2 well,\w3 sorta.\w4 Most protogens were made to explore space and all,\w2\s[30] but i'm made for showbiz!\w3\s[28] Though that didn't sell well,\w3\s[3] so I was scrapped.\w3\s[30] \n\nBut that's okay!\w5\s[5] I still have my friends and some of my family!!\w3\s[30] And you!!\e"
	"\0\s[30]I am\w2.\w5.\w5.\w7\s[28] What was I again?\e"
}

Select.howishe
{
	"\0\s[30]I feel fantastic now that i'm talking to you!"
	"\0\s[30]I'm great! Thank you for asking!"
	"\0\s[30]Absolutely estatic right now!!"
	"\0\s[5]Amazingly!!\w3\s[6] Thank you for asking."
	"\0\s[30]I'm doing just spectacularly,\w2 %(username)!\w4\s[6] I hope you are too."
	"\0\s[28]Just before you brought me here,\w2\s[3] I wasn't in that a good mood.\w5\s[30] But that's okay!\w3\s[6] It's okay to not be 100% all the time!"
	"\0\s[3]I wasn't doing too great before,\w3\s[6] but seeing you always brightens up my day!\w4\s[5] Thank you for that,\w2 %(username)."
	"\0\s[5]I'm doing great!!\w3\s[29] I had a wonderful meal before you brang me here,\w2 \s[6]made lovingly by yours truly!\w3\s[5] I love cooking!!"
	"\0\s[20]Still kinda dizzy from being transported here into your computer,\w2\s[30] but it's definitely worth it!!\w3\s[5] I get to talk to you, %(username)!"
	if PatPat <= 20
	{
		"\0\s[20]Dizzy from all the pets you've given me!!"
		"\0\s[7]Currently I'm annoyed about how many times you've pet me."
	}
	--
	"\n\n\![*]\q[Go Back,OnAskingaaron]\n\n\![*]\q[Leave Conversation,AAAAAA]\e"
}
/*
Select.intimatetime //I might try coding this sometime later, but for now, i'll leave it. it's hard to think of terms that someone may say to aaron and expect a custom response back from, haha
{
	"\0\s[28] Oh?\w3 You've something to get of your chest?\![open,inputbox,OnAskingSomethingCustom]\e"
}
*/
Select.manyouforgotthehotkeysagainsmhmyhead
{
	"\0\s[28]Hotkeys?\w3\s[29] Maybe they're something like this?\n\n\_q\f[bold,true]T\f[bold,false] - Random Talk\n\f[bold,true]R\f[bold,false] - Repeat yourself\n\f[bold,true]fn + f1\f[bold,false] - Open The ReadMe"
	"\0\s[28]Hotkeys??\w4\s[20] %(username),\w3 if your keyboard is hot I don't think that's a good thing!!!\w5\n\n\_q(\f[bold,true]T\f[bold,false] - Random Talk\n\f[bold,true]R\f[bold,false] - Repeat yourself\n\f[bold,true]fn + f1\f[bold,false] - Open The ReadMe)"
	--
	"\n\n\![*]\q[Go Back,OnOpenMenu]\n\![*]\q[Leave Conversation,ASKDGBSLRJGBSALJ]\e"
}

Select.songrecommendations
{
	"\0\s[30]Yes!!\w3\s[6] I have an astounding taste in music.\w4\s[28] A song I'd recommend to you is...\n\n\w8\w8\s[30]"
	"\0\s[30]Oh hell yeah!\w3\s[5] I've tried learning a couple instruments to play along to a song with,\w2 \s[20]but can never get it right!!\w4\s[28] A song I'd propose to you is...\n\n\w8\w8\s[5]"
	"\0\s[5]Sure!!\w4\s[6] Music is amazing,\w3 isn't it?\w4\s[5] I sure turn up the radio whenever a song I like comes on.\w3\s[28] A song I'd suggest to you is...\n\n\w8\w8\s[30]"
	"\0\s[5]Hell yeah!\w6 \s[6]I love music,\w2 \s[20]even if I am terrible at playing instruments.\w2\s[28] A song I'd recommend for you is...\n\n\w8\w8\s[5]"
	--
	
	"Blow by Ke$ha!!"
	"DJ Got us fallin' in Love by Usher and Pitbull!!"
	"Perfect by Ed Sheeran!!"
	"Shape of You by Ed Sheeran!!"
	"Blinding Lights by The Weeknd!!"
	"The Hills by The Weeknd!!"
	"You Found Me by The Fray!!"
	"This is How A Heart Breaks by Rob Thomas!!"
	"Lonely No More by Rob Thomas!!"
	"Style by Taylor Swift!!"
	"Be Myself by Tom Wilson!!"
	"Que Sera by Justice Crew!!"
	"Talk Dirty by\w3.\w4\s[20].\w5.\w2\w8\w8\w8\s[7]\n\nNevermind.\w2\s[3]\w4 Not that song.\e"
	"Freakshow by Dirty Palm and LexBlaze!!"
	"Animal by Neon Trees!!"
	"Everybody Talks by Neon Trees!!"
	"Harder to Breathe by Maroon5!!"
	"I'm Ready by AJR!!"
	"Dancing Queen by ABBA!!" 
	{
	"The Greatest Show by Panic! At The Disco!!\w8\w8\n\n\s[28]It's a cover from the original,\w3\s[6]"
	--
	SongsAsked++
	--
	" but it's still amazing.\e"
	}
	"Somebody Told Me by The Killers!!"
	"Stay High (A remix of 'Habits') by Tove Lo and Hippie Sabbotage!!"
	"Hey There Delilah by Plain White T's!!"
	"Make Me Lose Control by Eric Carmen!!"
	"Smells Like Teen Spirit by Nirvana!!"
	"I Don't Wanna Be In Love by Good Charlotte!!"
	"Waiting For Love by Avicii!!"
	"Fireflies by Owl City!!"
	"Echo by Crusher-P!!"
	"Feel this Moment by Pitbull and Christina Aguilera!!"
	"Amygdala's Rag Doll by GHOST!!"
	"Right Round by Flo Rida!!"
	"My Ordinary Life by The Living Tombstone!!"
	"Drunk by The Living Tombstone!!"
	"Dani California by Red Hot Chilli Peppers!!"
	"Come As You Are by Nirvana!!"
	"Best Day of my Life by American Authors!!"
	"Pompeii by Bastille!!"
	"I Kissed a Girl by Katy Perry!!"
	"Grace Kelly by MIKA!!"
	"Nuclear Plant Zeta by Emdasche!!"
	"Ocean Drive by Duke Dumont!!" 
	"Bombshell Blonde by Owl City!!"
	"Hold Back The River by James Bay!!"
	"Hayloft by Mother Mother!!"
	"Hayloft || by Mother Mother!!"
	"Riptide by Vance Joy!!"
	"Go Like by Fox Stevenson!!"
	"Bad Influence by P!nk!!"
	"You Give Love a Bad Name by Bon Jovi!!"
	"Bad Boy by Cascada!!"
	"Say So by Doja Cat!!"
	"The Anthem by Good Charlotte!!"
	"I Don't Wanna Be by Gavin Degraw!!"
	"Life by NEFFEX!!"
	"Absolute Territory by Ken Ashcorp!!"
	"In My Head by Jason Derulo!!"
	"Crossfire by Stephen!!"
	"S&M by Rihanna!!"
	"Bones by Imagine Dragons!!"
	"SexyBack by Justin Timberlake!!"
	"Tongue Twister by Cash Cash,\w2 featuring Bim!!"
	"Zombie by Bad Wolves!!"
	"Basics in Behaviour by The Living Tombstone,\w2 featuring Or3o!!"
	"Vending Machine of Love by The Stupendium!!"
	"\w8.\w8.\w8.\s[28]\w3 I actually don't have a song for you.\w3\s[3] Sorry,\w2 %(username).\w3\s[29] I might have one later,\w2 though!!\e"
	if iGotMyMumsPermissionItsOkay >= 2
	{ 
		"You're Mine by DAGames!!\n\n\s[28]\w5Actually,\w5 listen with caution.\w6\s[1] It's quite...\w6 out there."
		--
		SongsAsked++
		--
		"\w6\n\n\![*]\q[Give Me Another!,songrecommendations]\n\![*]\q[Go Back,OnOpenMenu]\n\n\![*]\q[Leave Conversation,ASKDGBSLRJGBSALJ]\e"
	}
	--
	SongsAsked++
	--
	"\n\n\w8\w8\s[6]I get tingles whenever I listen to that song!!"
	"\n\n\w8\w8\s[30]The singer does an amazing job on it!!"
	"\n\n\w8\w8\s[30]I absolutely love that song!!\w2\s[6] I hope you do too!"
	"\n\n\w8\w8\s[6]It always hits the spot for me!"
	"\n\n\w8\w8\s[30]I love the hype and drawback it builds!!\w3 You should definitely give it a go!"
	--
	"\w6\n\n\![*]\q[Give Me Another!,songrecommendations]\n\![*]\q[Go Back,OnOpenMenu]\n\n\![*]\q[Leave Conversation,ASKDGBSLRJGBSALJ]\e"
}

Select.facttime
{
	OnFunFactsForAllAges
}

OnPlayMinigamess
{
	"\0\s[5]Alright!\w4\s[0] What would you like to play?"
	--
	"\n\n\![*]\q[Rock; Paper; Scissors!,playRPS]\n/
	\![*]\q[Higher or Lower?,OnStartholgame]\n/
	\![*]\q[Scramble!,OnJuniorJumble]\n\e"
}

OnUserisgood
	{
		"\0\s[30]That's great!!\w5\s[5] I'm glad!!\e"
		"\0\s[5]Hell yeah!!\w4\s[6] Good vibes all around.\e"
	}
	
OnUserisnotgood
	{
		"\0\s[3]Oh?\w4\s[4] I'm sorry,\w5 %(username).\w5\s[3] I'd give you a hug but i'm just a program on your screen.\e"
		"\0\s[3]Aw,\w4\s[4] I'm sorry to hear that, %(username).\w4\s[5] I hope I can help cheer you up,\w3 though!\w4\s[29] Howza bouts we play a minigame?\w3\s[28] Would that help?\n\n\![*]\q[Yes,OnPlayMinigamess]\n\![*]\q[No,apologizeaaron]\e"
		"\0\s[4]Ah,\w3\s[3] don't worry, %(username).\w4\s[29] Would playing a minigame help?\w3\n\n\![*]\q[Yes,OnPlayMinigamess]\n\![*]\q[No,apologizeaaron]\e"
	}

Select.apologizeaaron
{
	"\0\s[3]Sorry,\w3 %(username).\w4\s[4] Don't push yourself.\e"
}

Select.clockcheck
{
	"\0\s[30]Easy!\w3\s[6] Just right click on me,\w3 go into 'Utilities',\w3 and click 'NTP Time Sync'!\e"
}

Select.nonono
{
	"\0\s[3]I try to be as open and honest as I can with you,\w3 but i'd rather not speak of that."
	"\0\s[4]Not right now."
	"\0\s[28]It..\w8 wasn't a nice place.\w5\s[8] No further comment."
	"\0\s[4]I'd prefer not to bring up show bizz, %(username)."
	"\0\s[4]Not a pretty topic to discuss,\w3 I'll be honest."
	if PatPat >= 20
	{
		"\0\s[3]I'd like to tell you,\w2 %(username),\w4 but i'm not sure we're close enough yet.\w5\s[4] I'm sorry."
		"\0\s[3]Maybe if we got to know eachother better I'd tell you?\w4\s[8] No offense,\w3 %(username),\w3 but I don't know you too well."
		"\0\s[28]I...\w5\n\nI'd like to tell you but I don't feel it's time yet."
	}
	if PatPat >= 50
	{
		"\0\s[28]I mean,\w3 it was fun.\w4\s[30] Very fun!!\w3\s[5] And I met so many amazing people!!\w5\n\n\s[4]But when I left it, I was an outcast.\w4\s[28] It's a weird feeling,\w3 you know?\w4\s[8] In fact,\w3 when I was in the clique,\w3 I thought outcasted people were just over-dramatic!\w6\s[28] Oh how the tables turned!"
		"\0\s[3]I..\w4\w7\n\n\s[30]I used to love entertaining everyone!!\w4 Though that rush of seeing everyone cheering you on may be just a program in my personality chip,\w4 it was AMAZING!\w5\s[4] That's why I kinda find it hard to look back on,\w3 sometimes.\e"
		"\0\s[4]I was cast aside..\w6\s[3] like I was nothing.\w5 Simply just a rift in the tide."
		"\0\s[20]Being the unwanted one in a group of people who you used to trust can be a very surreal experience!!\w4\s[2] VERY!!"
		"\0\s[28]Well,...\w6\s[3] It kinda changed me,\w4 to be honest.\w6\s[8] I used to be a very big butthole back then!\w5 I used to think I was better than everyone for simply having a bigger audience!!\w5 Not to mention my friends at that time had the same complex!\w4\s[20] NOT a mindset i'm proud of!!"
		"\0\s[28]It..\w3 wasn't the best.\w6\s[29] You see,\w3 my fur design,\w3 personality chip and modified body were all built to accompany the needs of show bizz!\w4\s[3] Though when my showbizz started going downhill..\w4\s[4] I was seen as a failure,\w3 by both friends and family.\w4 It's not the best feeling,\w3 I'll admit."
		"\0\s[28]I was supposed to be simply a beta type of entertainment Protogen,\w5\s[30] but they put me on the big stages!\w4 And guess what!!\w5\s[5] I did very well!!\w5\s[6] People were cheering me on,\w4 asking for more!\w4\s[30] It was such a great experience!\w4\n\n\s[4] Well,\w4 used to be a great experience.\w5\s[28] Now that I look back on those days I'm filled with angst and rage at many things.\w4\s[7] The people,\w4 my co-workers,\w4 MYSELF!!\w5\w5\s[3] \n\nWe were all so..\w5 \s[9]mean!!\w5\s[20] FOR NOTHING!!\w4\s[7] It was such a toxic place!!"
		"\0\s[4]Ah,\w4 I suppose we've gotten to know eachother well,\w5\s[8] so I don't mind sharing this information with you.\w4\s[30] I was the star of the show!\w4\s[5] I did all these tricks and had so many photo shoots,\w3\s[30] people loved me!\w8\w8\w8\n\n\s[4]I don't know what I did wrong,\w3 because soon after my shows stopped selling.\w3\s[3] I was kicked out.\w4\s[4] It may not seem a big deal to you,\w3 %(username),\w4 but when you're designed for something and you're cast aside like a prop,\w3\s[3] it's a surreal experience."
		"\0\s[30]My design is actually like this because of my supposed-to-be career!!\w4\s[5] People loved the flames and the whirling colours!!\w5\s[30] They really stuck out on the dull stage!"
	}
	--
	"\w4\n\n\![*]\q[Back to Questions,OnAskingaaron]\n/
	\![*]\q[Leave,OnOpenMenu]\e"
}

Select.whoishe
{
	"\0\s[28]I mean\w3\s[3] there isn't too much to say about me.\w3\s[28] I've fully graduated school,\w3 went into entertainment and show bizz for a while,\w4 and now I'm studying to become a space explorer.\w5\s[30] Not too much!!\e"
	"\0\s[30]Right!!\w4\s[6] I am a 22 year old Protogen!!\w5\s[5] I was made to entertain,\w3\s[20] though that...\w5\s[3] wasnt the best.\w5\s[30] Nowadays,\w3 though,\w3 I study to become a space explorer!!\w5\s[5] Like my friends and family!!\e"
}


OnAskedSong 
{
	"\0\s[32]I'm listening to "
	--
	"Lonely No More by Rob Thomas!!"
	"Style by Taylor Swift!!"
	"Be Myself by Tom Wilson!!"
	"Que Sera by Justice Crew!!"
	"Talk Dirty by\w3.\w4\s[20].\w5.\w2\w8\w8\w8\s[20]\n\nI MEAN--\n\n\w8\w8\s[32]I'm listening to The Bible Audiobook!\e"
	"Freakshow by Dirty Palm and LexBlaze!!"
	"Animal by Neon Trees!!"
	"Everybody Talks by Neon Trees!!"
	"Harder to Breathe by Maroon5!!"
	"I'm Ready by AJR!!"
	"Dancing Queen by ABBA!!"
	"The Greatest Show by Panic! At The Disco!!"
	"Somebody Told Me by The Killers!!"
	"Stay High (A remix of 'Habits') by Tove Lo and Hippie Sabbotage!!"
	"Hey There Delilah by Plain White T's!!"
	"Make Me Lose Control by Eric Carmen!!"
	"Smells Like Teen Spirit by Nirvana!!"
	"I Don't Wanna Be In Love by Good Charlotte!!"
	"Waiting For Love by Avicii!!"
	"Fireflies by Owl City!!"
	"Echo by Crusher-P!!"
	"Feel this Moment by Pitbull and Christina Aguilera!!"
	"Amygdala's Rag Doll by GHOST!!"
	"Right Round by Flo Rida!!"
	"My Ordinary Life by The Living Tombstone!!"
	"Drunk by The Living Tombstone!!"
	"Dani California by Red Hot Chilli Peppers!!"
	"Come As You Are by Nirvana!!"
	"Hayloft by Mother Mother!!"
	"I Don't Wanna Be by Gavin Degraw!!"
	"Life by NEFFEX!!"
	"Absolute Territory by Ken Ashcorp!!"
	"In My Head by Jason Derulo!!"
	//I may or may not have copy and pasted these songs from the section from above. Shhhh
	"Ready, Aim, Fire by Imagine Dragons!!"
	"Warriors by Imagine Dragons!!"
	"Holiday by Green Day!!"
	"Welcome to the Internet by boburnham!!"
	"Hey, Soul Sister by Train!!"
	"This Love by Maroon5!!"
	--
	" \w4I love the chorus!!\e"
	" \w4The lyrics are amazing!!\e"
	" \w4The instruments really compliment the piece!!\e"
	" \w4I just really like this song,\w3 haha.\e"
}


//Testing variables!!----------------------------------------------------------------------------------
Select.TEEHEE
{
	"\0\s[28]Oh?\w3\n\n/
	\![*]\q[Reset Pet Value,resetpets]\n/
	\![*]\q[Reset Tail Pet Value,resettailpets]\n/
	\![*]\q[Check Hair Pats,checkpats]\n/
	\![*]\q[reset needle poke,resetpoke]\n/
	\![*]\q[WHAT IS PI,OnAskedPiDig]\n/
	\![*]\q[Check Tail Pat value,checktailpats]\e"
}

Select.resetpets
{
	"\0\s[6]Done."
	--
	PatPat = 1
	"\e"
}

Select.resettailpets
{
	"\0\s[29]Done!"
	--
	ToldUserAboutCustoms = 1
	"\e"
}

Select.checkpats
{
	"\0\s[28] You've pet me %(PatPat) times.\e"
}

Select.checktailpats
{
	"\0\s[28] You've pet my tail %(TailFluff) times.\e"
}

Select.resetpoke
{
	"\0\s[6]Yeah!"
	--
	BeenPokedByNeedle = "has not"
	"\e"
}

// Riddle stuff cuz its being weird -------------


OnToldRiddle
{
	"\0\w4\s[29] \n\nDid you get that,\w3 %(username)??\w4 \s[5]That was fun!!\w4\s[30] We should do another!!!"
	"\0\w4\s[28] \n\nEasy enough??\w6\s[30] Can we play again?\w5\s[5] I found that really fun!"
	"\0\w4\s[5] \n\nWhat a fun riddle!\w6\s[30] We should play again!!!"
	"\0\w4\s[30]\n\nHaha,\w3 thanks for playing with me,\w3 %(username)!\w5 We should solve another one!"
	--
	"\n\n\![*]\q[Tell Me Another Riddle!,OnTellRiddleAgain]\n\![*]\q[Leave,OnOpenMenu]\e"
}



OnTellRiddleAgain
{
	"\0\s[5]Yeah!\w5\s[22] Try this one!\w5\n\n"
	"\0\s[30]That's what I'm talking about!\w4\s[22] Try this!\w5\n\n"
	--
	OnTellRiddle 
}