//---------------------------Booting and Ending--------------------------

//This .dic file is set aside for booting and ending dialogue, as well as a few other functions. Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html), in particular the page about SakuraScript, for more details about how to properly format ghost dialogue!
//You should be editing these in Notepad++, and in particular, you should set the Language to C to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//Much of this file you will only have to set up once, so take heart!


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//--A Note about Functions--
//A function that begins with On, such as OnFirstBoot here, can be called from anywhere in any .dic file by using \![raise] or by just sticking OnFunction somewhere. A function that does NOT start with On, however, can be a bit finicky. You can create your own functions all over the place if you want, there's just a difference between OnDoodlebop and Doodlebop, if you get me. See the walkthrough page about coding for more about creating functions.

//If you're having trouble getting a function of yours to run, like Doodlebop, try changing it to OnDoodlebop and see if that fixes it.
//***********************************************************************


//--OnFirstBoot--

//OnFirstBoot is, as you can probably guess, what happens when your user first boots up your ghost. This is where you'll want to set up an introduction and ask your user for information your ghost will need, like their name and what pronouns they'll be using. This will only run the first time they are booted!

//*********************Advanced User Info*******************************
//Because this only runs once and under an odd set of circumstances, it can be hard to test if this function is working properly. Trying to run the entire function using \![raise,OnFirstBoot] will instead bring up your alternate dialogue, so sadly you can't check it that way. You CAN get it to run using \![raise,OnFirstBoot,0] though.

//If you're going to be adding new variables and values and such, make sure you define them all in OnFirstBoot! You can make any value you want, but it has to equal SOMEthing to exist at first. Then you can do whatever with it.
//***********************************************************************


OnFirstBoot
{
//OnFirstBoot begins with some code at first to define some values your ghost will be using. I'll briefly touch on what they are, but for the most part you should not need to edit any of these and you can safely ignore most of them (except nowshell if you've changed your shell folder's name from master). Definitely don't delete them unless you know what you're doing.

 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passhour = 0
	passmin = 0 
	passsec = 0 // These keep track of the time.
 	username         = "USER" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 300 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). 
	nowshell = "master" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	firstboot = 1 //This marks that this is the first time you've run the ghost. It's so it won't reroute to general name changing dialogue when the user inputs their name.
	PatPat = 0 //patty pet pat
	iGotMyMumsPermissionItsOkay = 1 //this should stop aaron from saying anything out of character when the user first downloads him
	TailFluff = 0 //patty pet pat but tail
	RedShell = "Is"
	BlueShell = "Isnt"
	SongsAsked = 0
	FunFactsAsked = 0
	Totalminigamesplayed = 0
	
	if ISVAR("SongsAsked") == 0; SongsAsked = 0
	if ISVAR("PatPat") == 0; PatPat = 0
	if ISVAR("TailFluff") == 0; TailFluff = 0
	if ISVAR("FunFactsAsked") == 0; FunFactsAsked = 0
	if ISVAR("Totalminigamesplayed") == 0; Totalminigamesplayed = 0
	
	if reference0 == 0 //Don't touch this line.
 	{
		//---- Alright, here is where the dialogue for your ghost begins! Again, I hope you've studied up on the walkthrough's guide to dialogue coding! However, there are a few unique things about this first conversation that you should keep in mind.
		//Unlike most dialogue, it should start with "\![enter,passivemode]". Passivemode basically ensures that the balloons won't disappear, the choices won't time out, the ghosts won't talk randomly, you can't bring up menus, and makes sure that this dialogue plays through to the end correctly. This is one of the very few instances you'll ever use it, so make sure to get out of it at the end! I'll tell you when, so don't worry.
		//In Notepad++ with C language, you'll also notice that this dialogue is black instead of grey. This is because of the use of the backwards slash as mentioned in the advanced section of the SakuraScripting page. Do you see near the bottom where it has \n\n[half]/ with the other slash at the end before the choices are listed? You will want to replace dialogue up that \n\n[half], but do not mess with the choices beyond that unless you know what you're doing.
		//Always make sure to keep your dialogue in the quotation marks! And remember, you can't use quotation marks IN dialogue either. You can use two single apostrophes instead if you must. And REMEMBER what I said about \![enter,passivemode]! Do NOT delete that tag!
		
		"\![enter,passivemode]\1\s[10]\0\s[39]\w4\s[40]\w2\s[24]\w4\s[20]\w6WHOA!!\w8\w8\w8\n\n\s[28]Where am I??\w8 Huh??\w6\s[2]\n\nS\w4C\w4A\w4N\w4N\w4I\w4N\w4G\w4 T\w4E\w4R\w4R\w4A\w4I\w4N\w4.\w4.\w4.\w4.\w4\w8\w8\n\nHm.\w8 \s[8]I...\w5 \s[3]don't have this area in my database.\w5\s[20] I'm not in Ohio again,\w2 am I?!\w4\s[28] Maybe I'm dreaming?\w4\s[20] Not that I sleep,\w5\s[28] but it certainly could be a possibility.\w4\w5\w8\n\n\s[8]!!!\n\n\w8(He seemed to have noticed you)\w2\w8\s[8]\n\nOh!\w3\s[5] Hello!!\w5\s[29] You wouldn't happen to know where this is,\w4 would you?\n\n\w8(You explain to it that it's in your device)\w8\w8\n\n...\w3 \s[8]Huh.\w5\w8\s[28] Being stuck in a device is a new one!!\w4\w8\s[5] Not to fret!\w3 \s[30]I love meeting new people!\w4\![leave,passivemode] \n\nWhat are your pronouns,\w3 kind person?\n\n[half]/
		\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n/
		\![*]\q[She/Her/Hers,choicefirstsheher]\n/
		\![*]\q[They/Them/Their,choicefirsttheythem]\e"
		
		//There's a lot going on here, but what you mostly need to remember is to enter Passivemode at the beginning, and make sure not to touch the bottom part that starts with \w5\_q where the options are set up. Do whatever you like with the rest of the dialogue though! Make sure to set up poses for both characters right when you start, otherwise one will be invisible until they speak.
		//Note also the use of the \x and \c tags. Read more about them in the intermediate SakuraScript section of the walkthrough if you're curious.
		
		//*********************Advanced User Info*******************************
		//You can rename the choices at the bottom anything you like. The basic structure of a choice goes like \q[Displayed Name,Linkedfunction]. So for example, \q[Do a Dance,danceitup] would display "Do a Dance" in the balloon and it would link to the function titled "danceitup".
		//Note - Do not include quotation marks in the displayed name, or any other symbols like brackets or dialogue coding like \_a, since that'll break the option in the balloon. If you do this you'll notice pretty quickly. Also option names do not word wrap, so don't make them too long if your balloon is small.
		
		//If you remember my note from above about the difference between On functions, this is one place it comes up. If your linked function in this menu doesn't start with On, like danceitup up there, you'll have to preface it in the following code with Select.danceitup. You can see this at work below here. However, if it does have On, such as OnDanceitup, then you can simply name the function in the code as OnDanceitup. Take a look whenever functions are defined and how they're called in the files,and it should come together for you.
		
		//If you link to a function that doesn't exist, the ghost will do nothing. This can be handy for "Cancel" type functions, just point it at something that doesn't exist if you don't want to have a specific bit of cancel dialogue.
		
		//If you want your ghost to just refer to your user as "they" and want to skip the pronoun business altogether, then you can just delete the choices and end the dialogue with \e. You'll want to go into menu.dic and delete the pronoun choice option from the config menu as well.
		//***********************************************************************
 	}
	else
 	{
		//---- This is dialogue for when the user uninstalls the ghost for whatever reason, then reinstalls them again. They will run this dialogue instead of their normal dialogue above. You can change this to reflect the fact the user's uninstalled your ghost once, or you can make it the same as the above, it's up to you. You'll see this if you try to run OnFirstBoot using ![raise] without the extra 0 as mentioned above.
 		{
 		"\![enter,passivemode]\1\s[10]\0\s[20]WHOA!!\w8\w8\n\n\s[28]Where am I??\w8 Huh??\w6\s[2]\n\nS\w4C\w4A\w4N\w4N\w4I\w4N\w4G\w4.\w4.\w4.\w4.\w4\w8\w8\w8\n\nHm.\w3\s[28] It's not space,\w3 that's for sure.\w5\w8\w8\n!!!\w8\s[8]\n\nOh!\w3\s[5] Hello\w3.\w3.\w3.\w3?\n\nYou...\w8 look very familiar!!\w8\n\n\w3\w5\s[29]You wouldn't happen to know where this is,\w4 would you?\n\n\w8(You explain to it that it's in your device)\w8\w8\n\n...\w3Huh.\w5\s[28] Being in a device is a new one!!\w4\s[5] Not to fret!\w3 \s[30]I love meeting new people!\w4\![leave,passivemode] What are your pronouns,\w3 kind person?\n\n[half]/
		\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n/
		\![*]\q[She/Her/Hers,choicefirstsheher]\n/
		\![*]\q[They/Them/Their,choicefirsttheythem]\e"
		}
 	}
}

//Below are the choices that were defined at the end of the OnFirstBoot dialogue up there. These define the values your ghost will be using for pronouns according to what the user selected. On the whole, you should not need to touch these.

//*********************Advanced User Info*******************************
//Notice that after the values are set, there's a -- and then it loads up the next function in the sequence. You can use this basic method to set many values at once, then go to the same function afterwords.

//To define a value, you use a single = mark. If it's a word, you need to put it in quotation marks, but if it's a number, you do not. See the walkthrough page on coding for details.

//Notice how each choice is formatted as Select.choice. This is what I was talking about above with the difference between OnFunction and Function. These choices do not start with On, so they must begin with Select. instead. If you're setting up some quick choices for a menu you're only going to do once, then don't be afraid to use select. instead of having everything start with On.
//***********************************************************************

Select.choicefirsthehim
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	NameInput
}

Select.choicefirstsheher
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	NameInput
}

Select.choicefirsttheythem
{
	presuffix = "neither"
	himher = "them"
	heshe = "they"
	hisher = "theirs"
	hesshes = "they're"
	--
	NameInput
}


//--NameInput

//NameInput is the next step in our introduction sequence. Now that the ghost has the pronouns set properly, they can ask the user for their name. It's done in this order so they'll know what prefixes will be appropriate for their name, like Mr. to he/him for example.

//*********************Advanced User Info*******************************
//Note this functions' name. This isn't a natural function included in the ghost, it's a piece of dialogue created by the original base coder to finish this sequence (cindysuke). I point this out to show you that you can do this too! You can create any number of functions just like this called whatever you want to do and say whatever you want! There are many things you can do with your Ghost if you're creative. Don't feel limited by what's in these files or the listed Shiori functions!
//Just make sure you test them and they work, alright? I wrote more about coding and functions in the coding page for the walkthrough.
//***********************************************************************

NameInput
{
	//Note that there's a \![leave,passivemode] tag in this dialogue! Don't forget about this! If you leave them in passivemode they won't talk at all and it'd sort of defeat the purpose, right? I actually forgot this for a while with Hunter and Smoker and didn't notice because OnFirstBoot only runs once, so it took me some testing to find out what was wrong. Always make sure to leave passivemode when you're done with it!
	
	"\0\s[30]Sick!!\w4\n\n%(heshe)/%(himher) pronouns it is!\w8\s[28]Whilst we're at it,\w3\s[5] what is your name? \![open,inputbox,OnNameTeach,-1]\e"
	
	//At the end of this dialogue there's a tag saying "\![open,inputbox,OnNameTeach,-1]". It basically leads to the naming function defined in nameteach.dic, so don't touch it. Make sure it's there though! Otherwise your user won't have a way to put in their name. :o
	
	//*********************Advanced User Info*******************************
	//What this tag basically means is that you're calling a function at the end of the dialogue with the \! tag, you are telling it to open, you're telling it to open an inputbox, and you're telling that inputbox to link to a function called OnNameTeach, which is in the nameteach.dic file. Remember what I said about On functions? I talked a bit about this in the SakuraScripting walkthrough page and the coding page.
	//The -1 at the end determines how long the box will be open until it times out. -1 means it shouldn't time out at all, I think.
	//***********************************************************************
}

//--timeslot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

timeslot
{
	if hour >= 5 && hour <= 8
	{	"earlymorning"	}
	elseif hour >= 9 && hour <= 11
	{	"morning"	}
	elseif hour >= 12 && hour <= 14
	{	"lunch"	}
	elseif hour >= 15 && hour <= 17
	{	"afternoon"	}
	elseif hour >= 18 && hour <= 20
	{	"evening"	}
	elseif hour >= 21 && hour <= 24
	{ "latenight"	}
	else
	{ "midnight" }
}
//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--dayslot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

dayslot
{
	"%(month)month %(day)day"
}


//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost.

//*********************Advanced User Info*******************************
//If you're defining new values that depend on what you were doing with your ghost (like say, if you've hit them, if they're in a certain mode of some kind) and are generally temporary, remember to put them in OnBoot and set them back to zero or off. For example, I have a counter in the Hunter Smoker ghost that keeps track of if you've hit one of them so that when you go into their menus, it will know to give you the option to apologize or not. So I made sure to add a hunterpunchcount = 0 tag at the beginning of OnBoot, that way when you boot them up, they start fresh and don't display the option if you haven't done anything wrong yet. It's unlikely this'll come up very much if you're not interested in expanding your ghost, but I'm making a note of it here anyway for enterprising developers, huge success.

//You can also stick any values you want to reset on boot into their own function, like "BootReset", then run BootReset instead during boot so it's a bit less unwieldy. It's up to you though!
//***********************************************************************

OnBoot
 {
	lastTalk = "" //These values you may recognize from OnFirstBoot up there. Just pay them no mind.
	passhour = 0
	passmin = 0
	passsec = 0
	
 	"\0\s[0]\1\s[10]" //This sets them up in their neutral pose for now.
	
	//If you don't want to deal with individual day messages when you boot them, you can delete everything down to the end bracket for OnBoot (use Notepad++'s bracket tracking abilities to find where it is!) and instead add "%(normalboottalk)" to the end of the snip of dialogue up there that sets them up in their neutral poses. I'm pretty sure that should shortcut it properly. Simplified, it'd look like...
	//OnBoot
	//{
	//lastTalk = ""
	//passhour = 0
	//passmin = 0
	//passsec = 0 
	//"\0\s[0]\1\s[10]%(normalboottalk)"
	//}
	//If you want to check what day it is first though, read on ahead!
	--
	if dayslot == userbirthday //Now we're getting into the if statements. These check what the date is and, if it's a certain value, displays special dialogue. Here, the if statement is looking at the dayslot value (which we just defined) and evaluating it using the == operator to see if it equals another value, in this case the value "userbirthday". Basically this is checking to see if it's the user's birthday.
	
	//*********************Advanced User Info*******************************
	//If you're checking a value in an if statement, remember! 
	//= will define a value, so if you put blah = 90, it will change blah to 90.
	//== will check the value in an if statement, so if you put blah == 90, it will check if blah equals 90.
	//This tripped me up at first, so keep it in mind!
	//***********************************************************************
	
	{
				"\0\s[30]It's %(bornmonthprint) %(borndayprint)!!\w8\s[5]Happy birthday, %(username)!!!\e" 
				
				//Notice in this dialogue that there are two new envelopes, %(bornmonthprint) and %(borndayprint). These two things basically display the user's birthday - bornmonthprint is the month and borndayprint is the day. These were defined when the user put in their birthday in the menu.dic file. See word.dic for more info on envelopes.
				//If the user didn't or hasn't put in their birthday yet, this dialogue will basically never get called. Which makes sense.
	}
	
	elseif month == 6
	{
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"\0\s[30]Happy pride month!!\e" //duplicated the normal boot talk dialogues below so that Aaron has a 1/22 chance of syaing "happy pride month!" to the user everytime he boots up during June
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
		"%(normalboottalk)"
	}
	
	elseif dayslot == "1month 29day" //Like above, this if statement is checking the date. It's looking for the sixth month and the sixth day.
	
	//*********************Advanced User Info*******************************
	//elseif statements always go after an if statement, and essentially are just what they sound like... if this thing happens, do this; else, if this thing happens, do this. elseifs are good if you have multiple things you want to check for in one function, like multiple days of the year as we're doing right now. elseifs go in descending order, so it'll always check if one is true, then if two is true, then if three is true, and so on.
	//***********************************************************************
	
	{
				"\0\s[30]It's my Birthday today!!\w3\s[5] Isn't that cool??\e"
				"\0\s[30]It's my Birthday today!!\w3\s[5] Isn't that cool??\e"
				"%(normalboottalk)"
	}
	elseif dayslot == "12month 25day"
	{
		"\0\s[30]Merry Christmas, %(username)!!\w4\s[5] Or Happy Holidays if you don't celebrate Christmas!!\e"
	}
	/*
	elseif dayslot == "7month 4day"
	{
				"\1\s[10]It's the fourth of July.\e"
				
				//You can see how these basically work. You can add in new elseif statements along these same lines with your own dayslots if you want to have them say things for all sorts of days. You can also change these existing ones I put in as examples to other dates, like your character's birthdays, perhaps. This is up to you! If you don't care about this, you can delete all the elseifs and just leave the one for the user's birthday.
	}
	*/
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//--normalboottalk

//This is another unique bit of coding from cindysuke's ghost. OnBoot above checks for the day when you open them, but normalboottalk will vary their dialogue in a few different ways depending on the time and weekday. If you don't want to use these, you can delete everything under normalboottalk and write your own lines of general boot dialogue, so it'd look something like.

//normalboottalk
//{
//[insert your general boot dialogue here]
//}

//Otherwise, just replace the upcoming pieces of dialogue with what you like.


normalboottalk
{
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{
		"\0\s[0]It's Saturday night!!\w3\s[20] The weekend's halfway over!! :(\e"
		"\0\s[30]Saturday night!!\w3\s[6] Best night ever.\e"
		}
	elseif RAND(100) < 50 //What this does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur. Remember, you can have multiple lines of dialogue within one set of brackets like this! You just need to make sure they're all enclosed in their own set of quotation marks.
		{
		"\0\s[30]Hi, %(username)!!!\w3\s[28] Been a good day so far??\e"
		"\0\s[0]Hell yeah.\w3\s[6] It's amazing here.\e"
		"\0\s[30]Happy %(WhateverDayItIs)!!\e"
		"\0\s[28]Is it %(WhateverDayItIs)??\w4\s[20] I can't remember!\e"
		"\0\s[30]I like it here!\w4\s[5] I find time with you is time well spent!\e"
		{
		"\0\s[20]Oh boy!\w3\s[30] Am I glad to be here!!\w3\s[3] You got me out of "
		--
		"a very concerning argument!!"
		"a buttload of work!!"
		"a very awkward movie scene!!"
		"spending time with my family!!"
		--
		" \s[30]Very glad to be here!\e"
		}
		"\0\s[5]It's always a pleasure to come here!!\e"
		"\0\s[30]Here again!!\w3\s[6] It's a big pleasure.\e"
		"\0\s[6]Here's my happy place.\e"
		"\0\s[30]It's refreshing to see you again, %(username)!!\e"
		"\0\s[5]I'm happy to see you're safe,\w3 %(username).\e"
		"\0\s[30]I was so bored at home.\w3 Very glad to be here yet again!\e"
		if iGotMyMumsPermissionItsOkay >= 2
		{
			"\0\s[6]wassup %(username) it's ya boy skinny penis\e" //hahhahhah he said penis that makes it funny ahhahhahhahahdbashfbahfaahhhhahhhhwehhehhehehehheheh
			"\0\s[30]my man!!\e"
		}
		}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
		if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
		{
		"\0\s[20]ITS SO EARLY!?!\w3 DO YOU GET SLEEP!?!?\e"
		"\0\s[5]Even though I love seeing you,\w4 %(username),\w4 \s[20]I also appreciate getting a sufficient amount of sleep at this time of day.\e"
		"\0\s[20]It's very early!!\w4 I'm tired!!!!\e"
		"\0\s[28]What are you doing up this early?\e"
		}
		elseif timeslot == "morning"
		{
		"\0\s[0]Good morning, %(username)!!\w3\s[29] Sleep well?\e"
		"\0\s[6]I love starting off my day here.\w4\s[30] With you!\e"
		"\0\s[5]You look very sleepy!\e"
		"\0\s[5]Good morning!!!\w3\s[28] Had your coffee yet,\w3 %(username)?\e" //imagine drinking coffee 
		}
		elseif timeslot == "lunch"
		{
		"\0\s[20]I was in the middle of my sandwhich!!!\e"
		"\0\s[6]I love walking into a shopping centre during lunch.\w2\s[29] So many new faces!\w3\s[30] So many people!\e"
		"\0\s[29]Let's plan a luncheon sometime!!\w3\s[28] I've never had a lunch with friends before \s[30]but it seems very fun!!\e"
		"\0\s[28]I was just deciding on my lunch,\w3 \s[20]but then I came here!\w4\s[0] I suppose it beats cooking something,\w3 though.\e"
		"\0\s[30]Seeing as it's nearly lunch,\w3 \s[29]can we make something together???\e"
		}
		elseif timeslot == "afternoon"
		{
		"\0\s[30]Good Afternoon,\w2 %(username)!!!\w4\s[6] Had a good day?\e"
		"\0\s[20]I was about to hop into the shower!!\w4 \s[2]I STINK of body odour!!\e"
		"\0\s[30]The day's gone by so quickly!!\w3\s[20] I think i'll go to bed early tonight!\e"
		"\0\s[20]The day's been going by so slowly!!\w3\s[28] Not that i've been doing much to entertain myself,\w2 granted.\e"
		}
		elseif timeslot == "evening"
		{
 		"\0\s[29]What if we make dinner together??\w4\s[30] I'd like to make spaghetti and meatballs!!\e"
		"\0\s[29]What if we make dinner together??\w4\s[30] I'd like to make fish and chips!!\e"
		"\0\s[29]What if we make dinner together??\w4\s[30] I'd like to make nuggies!!\e"
		"\0\s[29]What if we make dinner together??\w4\s[30] I'd like to make salad!!\e"
		"\0\s[20]It was raining!!\w3 A LOT!!\e"
		"\0\s[20]I was just making dinner!!\w3 \s[2]WHAT IF MY HOUSE CATCHES FIRE!?!?\e"
		"\0\s[3]Reckon we could order something in for dinner?\w3\s[20] I'm very hungry!\e"
		if iGotMyMumsPermissionItsOkay >= 2
		{
 		"\0\s[7]I was about to get laid!!\w3 What the hell!!\e"
		}
		}
		elseif timeslot == "latenight"
		{
 		"\0\s[28]It's kinda late.\w4\s[3] This won't be too long,\w3 right?\w5\s[20] I'm sleepy.\e"
 		"\0\s[0]It's gettin on in the day!\e"
 		"\0\s[28]Reckon we could have a sleepover?\w4\s[1] I think it's a cool idea,\w4 is all.\e"
		if iGotMyMumsPermissionItsOkay >= 2
		{
 		"\0\s[20]Damn bruh really goin goblin mode aint you\e"
		}
		}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
		"\0\s[20]You're up very late!!\w4 I was asleep!!!\e"
		"\0\s[20]I WAS ASLEEP??\w4 IS THIS A DREAM???\w5 AM I DREAMING???\w5 OR AM I IN THE MATRIX?!?\e"
 		"\0\s[30]Why are you up so late!?!\w6 Sleeping is good!!!\e"
		if iGotMyMumsPermissionItsOkay >= 2
		{
 		"\0\s[20]Damn bruh really goin goblin mode aint you\e"
		}
		}
	}
}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. It can also be easily simplified down to
//OnClose
//{
//[insert your dialogue here]
//}
//if you don't want to deal with the time slots. Although do note, close dialogue must end with a \- instead of \e. \- will close the program.
//Like above with OnBoot, just replace all the following pieces of dialogue with your own. Note though that each bit here ends with \w8 instead of \e. That's because the actual end statement to close the ghost is at the very end, one of the very very rare times you won't have to end a line with \e. Instead, end it with \w8 so there's a little bit of a pause for the user before your ghost closes so they can read the last message.

OnClose
 {
	if passmin >= 5 || passhour > 0	//This checks to see if you've had them open for at least five minutes.
		{
			if RAND(100) < 40 //see above about the random number generator
			{
				"\0\s[5] Make sure to wash your ears!!\w8\w8"
				"\0\s[30]Scrub real hard alright!!\w8\w8"
				"\0\s[5]See you later,\w3 %(username)!!\w3\s[6] Can't wait for the next visit!\w8\w8"
				"\0\s[30]Bye, %(username)!!\e"
			}
			else
			{
			if timeslot == "earlymorning"
				{
					"\0\s[20]Finally able to get back to sleep!!\w8\w8"
					"\0\s[5]I can watch the sunrise!\w3\s[30] It's gonna be so pretty.\w8\w8"
					"\0\s[30]Yeah!\w4 Sleep is cool!!\w8\w8"
				}
			elseif timeslot == "morning"
 				{
 					"\0\s[5]Have a wonderful day, %(username)!!\w3\s[30] See you this afternoon!\w8\s[28]\w8\w8\w4\s[30]\w2\n\n Maybe!\w8\w8"
 				}
 			elseif timeslot == "lunch"
 				{
 					"\0\s[30]Cya, %(username)!\w6 I've a pasta bowl at home with my name written all over it!!!\w8\w8"
					"\0\s[28]So I was thinking of having a luncheon later with all of our friends--\-\e"
 					"\0\s[5] Have a nice lunch,w3 %(username)!!\w8"
 				}
 			elseif timeslot == "afternoon"
 				{
 					"\0\s[30]See you later,\w3 %(username)!!\w5\s[6] I'm gonna have a shower now!\w8\w8"
					"\0\s[30]SHOWER TME!!\w3\s[5] I WONT STINK OF BODY ODOUR ANYMORE!\w8\w8"
 					"\0\s[5]Have a nice dinner,\w4 %(username)!\w4\s[6] You're always welcome to join me,\w3 as well!\w8\w8"
 				}
  			elseif timeslot == "evening"
 				{
 						if weekday == 5 //here, a nested if statement is checking that if it's evening, is it also saturday? You can do this to check more specific times on other days as well. You can change this to some other day if you want, or just delete this little if/else section entirely and write your own evening related close dialogue.
 						{
 							"\0\s[29] Maybe we can still watch a short movie for movie night if I'm quick??\w8"
 						}
 						else //if it's not saturday, then it'll do this dialogue instead.
 						{
 							"\0\s[30]Sleep well,\w4 %(username)!!\w8"
							
 							"\0\s[5]You better head to bed soon!\w5 It's been fun, cya!\w8"
 						}
 				}
			elseif timeslot == "latenight"
			 	{
 						if weekday == 5 //This is the same check as above to see if it's Saturday. Note that this doesn't have an else statement! Sometimes you can get away with that, but make sure you test thoroughly.
						//Of course, you can also cut this check entirely if you want.
 						{
 							"\0\s[3]It's too late for movie night.\w4\s[30] But that's okay!!\w5 I got to spend time with you,\w4 and that's what matters!\w6\s[5] Sleep well, %(username)!!\w8"
							
 						}
						
 						"\0\s[20]Sleep is cool!!\w5 I like sleep!!\w8"
						
						"\0\s[5]I appreciate you letting me finally sleep!!\w4 Buh-bye!!\w8"
 				}
			else //like above, this is the midnight time slot since it's the last one left.
 				{
 						if weekday == 0 //checking if it's the middle of the night on Sunday
 						{
 							"\0\s[20]I don't think i'll be going to work tomorrow!!\w8"
 						}
						"\0\s[20] Ah!\w4 Good night!!\w8\w8"
						"\0\s[30]You better get sleep!!\w5\s[30] it's so late!!!\w5\s[5] Goodnight,\w3 %(username)!!\w8\w8"
				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
 		"\0\s[5]Cya, %(username)!\w8\w8"
		"\0\s[30]It's been fun \s[20](but short)\s[30] with you!!\w5\s[6] Can't wait for the next visit.\w8\w8"
 		"\0\s[28]Did you bring me here accidentally,\w3 %(username)?\w4\s[5] Haha!\w4\s[30] See you later!!\w8\w8"
		"\0\s[5]Stay safe,\w3 %(username)!!\w8\w8"
 	}
 	--
	"\w8\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 

//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
 {
	"\0\s[38]\w2\s[20]\w2!?!??\e"
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost or the Developer's Console->Reload->Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "Aaron" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt. I set this up to use the full ghost's name with Hunter and Smoker but I forget exactly how I did it and I'm having trouble getting it to work again. I think I just didn't define the Sakura or Kero names in either descript.txt or install.txt. You can experiment with it yourself. Otherwise, leave it as your Sakura character's name.
	{
		"\0\s[28]Reload?\w3 Like a computer program?\w6 Hu--\e"
		//Replace this dialogue with whatever you like.
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[5]It's been fun with you,\w2 %(username)!!\w4 Have fun with %(reference0)!!!\w8\w8\e"
		
		//Replace this dialogue with whatever you like. Notice the use of the %(reference0) envelope here? In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example. You don't have to use %(reference0) if you don't want to though.
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[0]\1\s[10]" //this sets up their default poses
	--
	if reference0 == "Aaron" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\0\s[20]WHAT JUST HAPPENED!?!?\e"
	}
	else //If you're switching to them from another ghost...
	{
		"\0\s[30]Cya, %(reference0)!\w8\s[5] Have a safe drive home!!\e"
		"\0\s[5]Bye,\w3 %(reference0)!\w6\s[30] It's my turn to spend time with %(username)!!\e"

		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}


//--OnShellChanging

//This will run when you change your ghost's shell. If you don't have any other shells for your ghost, you can safely ignore this but don't delete it, you might as well keep it just in case. I probably won't add a different shell to this template because shells are a lot of work ugh, but for the sake of argument, let's pretend I did.
/*
OnShellChanging
 {
	if reference0 == "Hypothetical Shell that doesn't actually exist" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{
	"\1\s[10]This dialogue is specifically for changing to this particular shell.\w8\0\w8\s[9]It totally exists.\w8\e"
	//Then rewrite this line as appropriate.
	}
	else //if you don't have any specific dialogue for a specific shell
	{
	"\0\s[0]This dialogue is for changing shells.\w8\1\s[10]Sure is.\w8\e"
	
	"\1\s[10]This is another bit of dialogue for changing shells.\w8\0\s[8]I wonder how many people will actually have multiple shells?\e"
	
	//Rewrite these two lines as you need.
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "GT Default Shell" //Again, this is the name of your shell as you put in the descript.txt file for that shell.
 	{
 		nowshell = "master" //This is the folder name for your shell. Not the same as the above! 
		
 		"\0\s[0]This dialogue is for switching to our default shell.\w8\1\s[18]No really, will anyone actually put in the work to use these functions?\w8\0\s[9]\n\n[half]Shh.\e"
		//Replace dialogue as required.
 	}
 	elseif reference0 == "Hypothetical Shell that doesn't actually exist" //You can use as many elseifs for as many shells as you've got.
 	{
 		nowshell = "totallyrealshell"
		
 		"\0\s[0]This dialogue is for switching to that hypothetical shell.\e"
		
 		"\0\s[0]This is another bit of dialogue for switching to this hypothetical shell.\w8\1\s[18]Man if you actually use this, you should tell Zar, it'll blow her mind.\w8\0\n\n[half]\s[9]Shut up, we're not supposed to be in-character here.\e"
		//Replace these bits with whatever you have in mind.
 	}
 	elseif reference0 == "Another totally real shell wow"
 	{
 		nowshell = "thiswouldbesomuchwork"
		
 		"\1\s[10]This dialogue is after we've switched to another totally real shell.\e"
		//Replace this as well.
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\0\s[0]This dialogue is after we've changed our shell to %(reference[0]).\w8\1\s[18]How many shells you got?\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to. Replace this bit of dialogue as you need.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Make sure to read the clothing page on the walkthrough for details on how clothes work! This template won't have any because Girl and Triangle move around too much for it, but if your ghost is mostly stationary, clothes are an option. In that case, these functions are for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Clothing for Girl" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //This checks if you're putting it on.
			{
			"\0\s[0]You put my clothing item on me.\w8\1\s[19]lol like zar would ever bother with clothes for a ghost.\w8\0\s[9]\n\n[half]Shut up dude you're going to get us in trouble.\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]You took the clothing item off.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "some kind of clothing for triangle??" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I'm wearing some kind of clothing.\w8\0\s[8]Maybe a hat?\e"
			}
			else //When you take it off.
			{
			"\1\s[10]You took off some kind of clothing.\e"
			}
		}
	elseif reference1 == "i'm gonna say a propeller beanie" //As you've seen above, you can use elseifs to expand the list if you have more than one item.
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[10]You put a hat on me.\w8\0\s[6]lol.\w8\1\n\n[half]\s[11]Shaddap.\e"
			}
			else //when you take it off
			{
			"\1\s[10]You took off the hat.\e"
			}
		}
	}
}
*/

